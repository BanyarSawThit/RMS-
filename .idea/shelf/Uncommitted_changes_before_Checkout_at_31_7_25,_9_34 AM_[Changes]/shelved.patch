Index: templates/base.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}RMS{% endblock %}</title>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" rel=\"stylesheet\">\n    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" rel=\"stylesheet\">\n    {% load static %}\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <header class=\"bg-dark text-white sticky-top\">\n        <div class=\"container\">\n            <nav class=\"navbar navbar-expand-lg navbar-dark\">\n                <a class=\"navbar-brand\" href=\"{% url 'home' %}\">\n                    <img src=\"{% static 'images/logo.png' %}\" alt=\"Logo\" width=\"50\" height=\"50\">\n                    Restaurant Management System\n                </a>\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span class=\"navbar-toggler-icon\"></span>\n                </button>\n                <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul class=\"navbar-nav ml-auto\">\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"{% url 'dashboard' %}\">Dashboard</a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"{% url 'menu' %}\">Menu</a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"{% url 'order_home' %}\">Order</a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"{% url 'inventory' %}\">Inventory</a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    </header>\n\n    <main class=\"content\">\n        <div class=\"container py-4\">\n            {% block content %}\n            {% endblock %}\n        </div>\n    </main>\n\n    <footer class=\"text-center sticky-bottom\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md-4\">\n                    <h5>Quick Links</h5>\n                    <ul class=\"list-unstyled\">\n                        <li><a href=\"/admin\">Django Admin</a></li>\n                    </ul>\n                </div>\n                <div class=\"col-md-4\">\n                    <h5>About Us</h5>\n                    <p>Restaurant Management System is designed to streamline the operations of restaurants and enhance managing experience.</p>\n                </div>\n                <div class=\"col-md-4\">\n                    <h5>Contact Us</h5>\n                    <p>Email: support@restaurantmanagement.com</p>\n                    <p>Phone: (+65) 80901063</p>\n                </div>\n            </div>\n            <div class=\"mt-3\">\n                <p> 2025 </p>\n            </div>\n        </div>\n    </footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/base.html b/templates/base.html
--- a/templates/base.html	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ b/templates/base.html	(date 1753876557130)
@@ -23,7 +23,7 @@
                 <div class="collapse navbar-collapse" id="navbarNav">
                     <ul class="navbar-nav ml-auto">
                         <li class="nav-item">
-                            <a class="nav-link" href="{% url 'dashboard' %}">Dashboard</a>
+                            <a class="nav-link" href="#">Dashboard</a>
                         </li>
                         <li class="nav-item">
                             <a class="nav-link" href="{% url 'menu' %}">Menu</a>
Index: RMS/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nURL configuration for RMS project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom core.views import home\nfrom rest_framework.authtoken.views import obtain_auth_token\n\nurlpatterns = [\n    path('api-token-auth/', obtain_auth_token, name='api-token-auth'),\n    path('admin/', admin.site.urls),\n    path('', home, name='home'),\n    path('menu/', include('menu.urls')),\n    path('order/', include('order.urls')),\n    path('inventory/', include('inventory.urls')),\n    path('dashboard/', include('center.urls')),\n]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RMS/urls.py b/RMS/urls.py
--- a/RMS/urls.py	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ b/RMS/urls.py	(date 1753925460505)
@@ -26,5 +26,4 @@
     path('menu/', include('menu.urls')),
     path('order/', include('order.urls')),
     path('inventory/', include('inventory.urls')),
-    path('dashboard/', include('center.urls')),
 ]
Index: RMS/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for RMS project.\n\nGenerated by 'django-admin startproject' using Django 5.1.9.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\nfrom decouple import config\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY')\nDEBUG = config('DEBUG', default=False, cast=bool)\n\n# SECURITY WARNING: don't run with debug turned on in production!\n# DEBUG = True\n\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'core',\n    'menu',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'order',\n    'inventory',\n    'center',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'RMS.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / \"templates\"],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'RMS.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # Require login by default\n    ],\n    'DEFAULT_FILTER_BACKENDS': [\n        'django_filters.rest_framework.DjangoFilterBackend',\n        'rest_framework.filters.SearchFilter',\n    ],\n    'PAGE_SIZE': 10,\n}\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'Asia/Singapore'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nSTATICFILES_DIRS = [\n    BASE_DIR/'static',\n]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RMS/settings.py b/RMS/settings.py
--- a/RMS/settings.py	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ b/RMS/settings.py	(date 1753925459547)
@@ -45,7 +45,6 @@
     'rest_framework.authtoken',
     'order',
     'inventory',
-    'center',
 ]
 
 MIDDLEWARE = [
Index: center/urls.py
===================================================================
diff --git a/center/urls.py b/center/urls.py
deleted file mode 100644
--- a/center/urls.py	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,6 +0,0 @@
-from django.urls import path
-from center.views import *
-
-urlpatterns = [
-    path('', dashboard, name='dashboard'),
-    ]
\ No newline at end of file
Index: core/apps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/apps.py b/core/apps.py
deleted file mode 100644
--- a/core/apps.py	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,6 +0,0 @@
-from django.apps import AppConfig
-
-
-class CoreConfig(AppConfig):
-    default_auto_field = 'django.db.models.BigAutoField'
-    name = 'core'
Index: frontend/order.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/order.html b/frontend/order.html
deleted file mode 100644
--- a/frontend/order.html	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,1223 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Order Management - RMS</title>
-    <script src="https://cdn.tailwindcss.com"></script>
-    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
-    <style>
-        .modal {
-            display: none;
-            position: fixed;
-            top: 0;
-            left: 0;
-            right: 0;
-            bottom: 0;
-            background: rgba(0,0,0,0.5);
-            align-items: center;
-            justify-content: center;
-            z-index: 1000;
-        }
-        .modal.show {
-            display: flex;
-        }
-        .table-card {
-            cursor: pointer;
-            transition: all 0.3s ease;
-            min-height: 120px;
-            display: flex;
-            flex-direction: column;
-            justify-content: center;
-            align-items: center;
-        }
-        .table-card:hover {
-            transform: scale(1.02);
-        }
-        .table-occupied {
-            border-color: #EF4444;
-            background-color: #FEF2F2;
-        }
-        .table-reserved {
-            border-color: #F59E0B;
-            background-color: #FFFBEB;
-        }
-        .table-available {
-            border-color: #10B981;
-            background-color: #F0FDF4;
-        }
-        .restaurant-grid {
-            display: grid;
-            grid-template-columns: repeat(4, 1fr);
-            gap: 1rem;
-            max-width: 1000px;
-            margin: 0 auto;
-        }
-        .counter-area {
-            grid-column: 1 / -1;
-            margin-top: 1rem;
-        }
-        .tab-content {
-            display: none;
-        }
-        .tab-content.active {
-            display: block;
-        }
-        .tab-button {
-            cursor: pointer;
-            padding: 0.5rem 1rem;
-            border-bottom: 2px solid transparent;
-            transition: all 0.2s ease;
-            background: none;
-            border: none;
-            font-size: inherit;
-            font-family: inherit;
-        }
-        .tab-button.active {
-            border-bottom-color: #000;
-            color: #000;
-            font-weight: 500;
-        }
-        .tab-button:not(.active) {
-            color: #6b7280;
-        }
-        .tab-button:not(.active):hover {
-            color: #374151;
-        }
-    </style>
-</head>
-<body class="bg-gray-50 font-['Inter']">
-    <nav class="bg-white shadow-sm">
-        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
-            <div class="flex justify-between h-16">
-                <div class="flex">
-                    <div class="flex-shrink-0 flex items-center">
-                        <h1 class="text-2xl font-bold text-gray-900">RMS</h1>
-                    </div>
-                    <div class="hidden sm:ml-6 sm:flex sm:space-x-8">
-                        <a href="index.html" class="text-gray-500 hover:text-gray-900 inline-flex items-center px-1 pt-1 text-sm font-medium">Home</a>
-                        <a href="menu.html" class="text-gray-500 hover:text-gray-900 inline-flex items-center px-1 pt-1 text-sm font-medium">Menu</a>
-                        <a href="order.html" class="border-b-2 border-black text-gray-900 inline-flex items-center px-1 pt-1 text-sm font-medium">Orders</a>
-                        <a href="inventory.html" class="text-gray-500 hover:text-gray-900 inline-flex items-center px-1 pt-1 text-sm font-medium">Inventory</a>
-                    </div>
-                </div>
-            </div>
-        </div>
-    </nav>
-
-    <!-- Table Action Modal -->
-    <div id="tableModal" class="modal">
-        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
-            <div class="px-4 py-5 sm:p-6">
-                <h3 class="text-lg font-medium text-gray-900" id="modalTitle">Table Action</h3>
-                <form id="tableActionForm" class="mt-4 space-y-4">
-                    <input type="hidden" id="tableNumber" name="tableNumber">
-                    <div>
-                        <label for="actionType" class="block text-sm font-medium text-gray-700">Action</label>
-                        <select id="actionType" name="actionType" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" onchange="toggleCustomerFields()">
-                            <option value="seat">Seat Customers</option>
-                            <option value="reserve">Make Reservation</option>
-                            <option value="clear">Clear Table</option>
-                            <option value="order">Take Order</option>
-                        </select>
-                    </div>
-                    <div id="customerFields">
-                        <div>
-                            <label for="customerName" class="block text-sm font-medium text-gray-700">Customer Name</label>
-                            <input type="text" id="customerName" name="customerName" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2">
-                        </div>
-                        <div class="mt-4">
-                            <label for="partySize" class="block text-sm font-medium text-gray-700">Party Size</label>
-                            <input type="number" id="partySize" name="partySize" min="1" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2">
-                        </div>
-                        <div id="reservationTimeField" class="mt-4 hidden">
-                            <label for="reservationTime" class="block text-sm font-medium text-gray-700">Reservation Time</label>
-                            <input type="datetime-local" id="reservationTime" name="reservationTime" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2">
-                        </div>
-                    </div>
-                    <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3">
-                        <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-black text-base font-medium text-white hover:bg-gray-800 sm:text-sm">
-                            Confirm
-                        </button>
-                        <button type="button" onclick="closeModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 sm:mt-0 sm:text-sm">
-                            Cancel
-                        </button>
-                    </div>
-                </form>
-            </div>
-        </div>
-    </div>
-
-    <!-- Add Item to Order Modal -->
-    <div id="addItemModal" class="modal">
-        <div class="bg-white rounded-lg shadow-xl max-w-lg w-full mx-4">
-            <div class="px-4 py-5 sm:p-6">
-                <h3 class="text-lg font-medium text-gray-900" id="addItemModalTitle">Add Item to Order</h3>
-                <div class="mt-4">
-                    <div class="max-h-96 overflow-y-auto">
-                        <div class="grid grid-cols-1 gap-3" id="addItemMenuList">
-                            <!-- Menu items will be loaded here -->
-                        </div>
-                    </div>
-                </div>
-                <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3">
-                    <button type="button" onclick="closeAddItemModal()" class="w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 sm:text-sm">
-                        Cancel
-                    </button>
-                </div>
-            </div>
-        </div>
-    </div>
-
-    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
-        <!-- Top Navigation Tabs -->
-        <div class="mb-8 border-b border-gray-200">
-            <div class="sm:flex sm:items-center">
-                <div class="sm:flex-auto">
-                    <nav class="flex space-x-8" id="tabNav">
-                        <button type="button" class="tab-button active w-24 py-2" onclick="switchTab('tables')">Tables</button>
-                        <button type="button" class="tab-button w-24 py-2" onclick="switchTab('orders')">Orders</button>
-                        <button type="button" class="tab-button w-24 py-2" onclick="switchTab('reservations')">Reservations</button>
-                    </nav>
-                </div>
-            </div>
-        </div>
-
-        <!-- Tables Tab Content -->
-        <div id="tablesContent" class="tab-content active">
-            <!-- Restaurant Layout -->
-            <div class="mb-8">
-                <h3 class="text-lg font-medium text-gray-900 mb-4">Restaurant Layout</h3>
-                <div class="bg-white p-6 rounded-lg shadow">
-                    <div class="restaurant-grid" id="tableLayout">
-                        <!-- Tables will be dynamically added here -->
-                    </div>
-                </div>
-            </div>
-
-            <!-- Active Orders -->
-            <div class="mt-8">
-                <h3 class="text-lg font-medium text-gray-900 mb-4">Active Orders</h3>
-                <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
-                    <table class="min-w-full divide-y divide-gray-300">
-                        <thead class="bg-gray-50">
-                            <tr>
-                                <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900">Order #</th>
-                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Table</th>
-                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Customer</th>
-                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Items</th>
-                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
-                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Total</th>
-                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Actions</th>
-                            </tr>
-                        </thead>
-                        <tbody class="divide-y divide-gray-200 bg-white" id="activeOrders">
-                            <!-- Active orders will be dynamically added here -->
-                        </tbody>
-                    </table>
-                </div>
-            </div>
-        </div>
-
-        <!-- Orders Tab Content -->
-        <div id="ordersContent" class="tab-content">
-            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
-                <!-- Create New Order Section -->
-                <div>
-                    <h3 class="text-lg font-medium text-gray-900 mb-4">Create New Order</h3>
-
-                    <!-- Table Selection -->
-                    <div class="bg-white p-6 rounded-lg shadow mb-6">
-                        <h4 class="text-md font-medium text-gray-900 mb-4">Select Table</h4>
-                        <div class="grid grid-cols-2 gap-4" id="orderTableSelection">
-                            <!-- Available tables will be shown here -->
-                        </div>
-                    </div>
-
-                    <!-- Menu Items for Ordering -->
-                    <div class="bg-white p-6 rounded-lg shadow">
-                        <div class="flex justify-between items-center mb-4">
-                            <h4 class="text-md font-medium text-gray-900">Menu Items</h4>
-                            <button onclick="toggleMenuEdit()" class="text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded-md" id="editMenuBtn">
-                                Edit Menu
-                            </button>
-                        </div>
-                        <div class="grid grid-cols-1 gap-4" id="orderMenuItems">
-                            <div class="text-center py-8">
-                                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
-                                <p class="mt-2 text-sm text-gray-500">Loading menu items...</p>
-                            </div>
-                        </div>
-                        <div id="addMenuItemForm" class="mt-4 p-4 border border-gray-200 rounded-lg hidden">
-                            <h5 class="font-medium mb-3">Add New Menu Item</h5>
-                            <div class="grid grid-cols-2 gap-4">
-                                <input type="text" id="newItemName" placeholder="Item Name" class="border border-gray-300 rounded-md px-3 py-2">
-                                <input type="number" id="newItemPrice" placeholder="Price" step="0.01" class="border border-gray-300 rounded-md px-3 py-2">
-                            </div>
-                            <textarea id="newItemDescription" placeholder="Description" class="w-full mt-2 border border-gray-300 rounded-md px-3 py-2"></textarea>
-                            <div class="flex gap-2 mt-3">
-                                <button onclick="addNewMenuItem()" class="bg-black text-white px-4 py-2 rounded-md hover:bg-gray-800">Add Item</button>
-                                <button onclick="cancelAddMenuItem()" class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400">Cancel</button>
-                            </div>
-                        </div>
-                    </div>
-
-                    <!-- Order Summary -->
-                    <div class="bg-white p-6 rounded-lg shadow mt-6" id="orderSummarySection" style="display: none;">
-                        <h4 class="text-md font-medium text-gray-900 mb-4">Order Summary</h4>
-                        <div id="currentOrderSummary" class="space-y-2 mb-4">
-                            <!-- Order items will be shown here -->
-                        </div>
-                        <div class="border-t pt-4">
-                            <div class="flex justify-between items-center mb-4">
-                                <span class="text-lg font-medium">Total:</span>
-                                <span class="text-lg font-bold" id="currentOrderTotal">$0.00</span>
-                            </div>
-                            <button onclick="submitOrder()" class="w-full bg-black text-white py-2 px-4 rounded-md hover:bg-gray-800 disabled:bg-gray-300" id="submitOrderBtn" disabled>
-                                Submit Order
-                            </button>
-                        </div>
-                    </div>
-                </div>
-
-                <!-- Customer Orders Section -->
-                <div>
-                    <h3 class="text-lg font-medium text-gray-900 mb-4">Customer Orders</h3>
-                    <div class="bg-white p-6 rounded-lg shadow">
-                        <div class="space-y-4" id="customerOrdersList">
-                            <!-- Customer orders will be shown here -->
-                        </div>
-                    </div>
-                </div>
-            </div>
-        </div>
-
-        <!-- Reservations Tab Content -->
-        <div id="reservationsContent" class="tab-content">
-            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
-                <!-- Reservations List -->
-                <div class="lg:col-span-2">
-                    <div class="bg-white p-6 rounded-lg shadow">
-                        <h3 class="text-lg font-medium text-gray-900 mb-4">Reservations</h3>
-                        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
-                            <table class="min-w-full divide-y divide-gray-300">
-                                <thead class="bg-gray-50">
-                                    <tr>
-                                        <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900">Table</th>
-                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Customer</th>
-                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Party Size</th>
-                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Date & Time</th>
-                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
-                                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Actions</th>
-                                    </tr>
-                                </thead>
-                                <tbody class="divide-y divide-gray-200 bg-white" id="reservationsList">
-                                    <!-- Reservations will be dynamically added here -->
-                                </tbody>
-                            </table>
-                        </div>
-                    </div>
-                </div>
-
-                <!-- Add New Reservation -->
-                <div>
-                    <div class="bg-white p-6 rounded-lg shadow">
-                        <h3 class="text-lg font-medium text-gray-900 mb-4">Add New Reservation</h3>
-                        <form id="newReservationForm" class="space-y-4">
-                            <div>
-                                <label for="reservationTable" class="block text-sm font-medium text-gray-700">Table</label>
-                                <select id="reservationTable" name="table" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" required>
-                                    <option value="">Select a table</option>
-                                </select>
-                            </div>
-                            <div>
-                                <label for="reservationCustomer" class="block text-sm font-medium text-gray-700">Customer Name</label>
-                                <input type="text" id="reservationCustomer" name="customer" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" required>
-                            </div>
-                            <div>
-                                <label for="reservationPartySize" class="block text-sm font-medium text-gray-700">Party Size</label>
-                                <input type="number" id="reservationPartySize" name="partySize" min="1" max="10" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" required>
-                            </div>
-                            <div>
-                                <label for="reservationDateTime" class="block text-sm font-medium text-gray-700">Date & Time</label>
-                                <input type="datetime-local" id="reservationDateTime" name="dateTime" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" required>
-                            </div>
-                            <button type="submit" class="w-full bg-black text-white py-2 px-4 rounded-md hover:bg-gray-800">
-                                Create Reservation
-                            </button>
-                        </form>
-                    </div>
-                </div>
-            </div>
-        </div>
-    </main>
-
-    <script>
-        // Backend API base URL - adjust this to match your Django server
-        const API_BASE_URL = 'http://localhost:8000/api';
-
-        // Sample data (will be replaced with backend data)
-        let tables = [
-            { number: 8, status: 'occupied', customer: 'John Doe', partySize: 4 },
-            { number: 7, status: 'available' },
-            { number: 6, status: 'occupied', customer: 'Jane Smith', partySize: 2 },
-            { number: 5, status: 'available' },
-            { number: 4, status: 'occupied', customer: 'Bob Wilson', partySize: 3 },
-            { number: 3, status: 'available' },
-            { number: 2, status: 'reserved', customer: 'Alice Brown', partySize: 2, reservationTime: '2023-07-21T19:00' },
-            { number: 1, status: 'reserved', customer: 'Charlie Davis', partySize: 4, reservationTime: '2023-07-21T20:00' }
-        ];
-
-        let menuItems = [];
-        let activeOrders = [
-            {
-                id: 1001,
-                table: 2,
-                customer: 'John Doe',
-                items: [
-                    { id: 1, name: 'Pasta Carbonara', quantity: 2, price: 15.99 },
-                    { id: 2, name: 'Bruschetta', quantity: 1, price: 8.99 }
-                ],
-                status: 'preparing',
-                total: 40.97,
-                timestamp: new Date().toISOString()
-            },
-            {
-                id: 1002,
-                table: 4,
-                customer: 'Bob Wilson',
-                items: [
-                    { id: 3, name: 'Grilled Chicken', quantity: 1, price: 18.99 },
-                    { id: 4, name: 'Caesar Salad', quantity: 1, price: 12.99 }
-                ],
-                status: 'preparing',
-                total: 31.98,
-                timestamp: new Date().toISOString()
-            }
-        ];
-
-        let currentOrder = {
-            table: null,
-            customer: '',
-            items: [],
-            total: 0
-        };
-
-        let orderCounter = 1003;
-
-        // Tab switching functionality
-        function switchTab(tabName) {
-            console.log('Switching to tab:', tabName);
-
-            // Hide all tab contents
-            document.querySelectorAll('.tab-content').forEach(content => {
-                content.classList.remove('active');
-                content.style.display = 'none';
-            });
-
-            // Remove active class from all tab buttons
-            document.querySelectorAll('.tab-button').forEach(btn => {
-                btn.classList.remove('active');
-            });
-
-            // Show selected tab content
-            const selectedTab = document.getElementById(tabName + 'Content');
-            if (selectedTab) {
-                selectedTab.classList.add('active');
-                selectedTab.style.display = 'block';
-
-                // Add active class to clicked button
-                const button = document.querySelector(`.tab-button[onclick="switchTab('${tabName}')"]`);
-                if (button) {
-                    button.classList.add('active');
-                }
-
-                // Load data for specific tabs
-                if (tabName === 'orders') {
-                    loadMenuItemsForOrdering();
-                    renderOrderTableSelection();
-                    renderCustomerOrders();
-                } else if (tabName === 'reservations') {
-                    loadReservations();
-                    loadAvailableTablesForReservation();
-                }
-            } else {
-                console.error('Tab content not found:', tabName);
-            }
-        }
-
-        // Initialize page
-        document.addEventListener('DOMContentLoaded', function() {
-            // Initial render
-            renderTables();
-            renderOrders();
-
-            // Ensure correct tab is shown
-            document.querySelectorAll('.tab-content').forEach(content => {
-                content.style.display = content.classList.contains('active') ? 'block' : 'none';
-            });
-        });
-
-        // API Functions
-        async function fetchMenuItems() {
-            try {
-                // Try to fetch from Django backend first
-                const response = await fetch(`${API_BASE_URL}/menu-items/`);
-                if (response.ok) {
-                    const data = await response.json();
-                    return data;
-                }
-            } catch (error) {
-                console.log('Backend not available, using sample data');
-            }
-
-            // Fallback to sample data
-            return [
-                { id: 1, name: "Pasta Carbonara", category: "Main Course", description: "Classic Italian pasta with cream sauce", price: 15.99, available: true },
-                { id: 2, name: "Bruschetta", category: "Appetizers", description: "Toasted bread with tomatoes", price: 8.99, available: true },
-                { id: 3, name: "Grilled Chicken", category: "Main Course", description: "Tender grilled chicken breast with herbs and spices", price: 18.99, available: true },
-                { id: 4, name: "Caesar Salad", category: "Appetizers", description: "Fresh romaine lettuce with caesar dressing", price: 12.99, available: true },
-                { id: 5, name: "Tiramisu", category: "Desserts", description: "Classic Italian dessert", price: 7.99, available: true },
-                { id: 6, name: "Chocolate Cake", category: "Desserts", description: "Rich chocolate layer cake", price: 6.99, available: true }
-            ];
-        }
-
-        async function submitOrderToBackend(orderData) {
-            try {
-                const response = await fetch(`${API_BASE_URL}/orders/`, {
-                    method: 'POST',
-                    headers: {
-                        'Content-Type': 'application/json',
-                    },
-                    body: JSON.stringify(orderData)
-                });
-
-                if (response.ok) {
-                    return await response.json();
-                }
-            } catch (error) {
-                console.log('Backend not available, simulating order creation');
-            }
-
-            // Fallback: simulate order creation
-            return {
-                id: orderCounter++,
-                ...orderData,
-                status: 'preparing'
-            };
-        }
-
-        // Load menu items for ordering tab
-        async function loadMenuItemsForOrdering() {
-            const container = document.getElementById('orderMenuItems');
-            container.innerHTML = `
-                <div class="text-center py-8 col-span-full">
-                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
-                    <p class="mt-2 text-sm text-gray-500">Loading menu items...</p>
-                </div>
-            `;
-
-            if (menuItems.length === 0) {
-                menuItems = await fetchMenuItems();
-            }
-
-            const itemsToShow = isMenuEditMode ? menuItems : menuItems.filter(item => item.available);
-
-            container.innerHTML = itemsToShow.map(item => `
-                <div class="border border-gray-200 rounded-lg p-4 ${!item.available ? 'opacity-50' : ''}">
-                    <div class="flex justify-between items-start mb-2">
-                        <h5 class="font-medium text-gray-900">${item.name}</h5>
-                        ${isMenuEditMode ? `
-                            <div class="flex gap-1">
-                                <button onclick="editMenuItem(${item.id})" class="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">Edit</button>
-                                <button onclick="toggleMenuItemAvailability(${item.id})" class="text-xs ${item.available ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'} px-2 py-1 rounded">
-                                    ${item.available ? 'Hide' : 'Show'}
-                                </button>
-                                <button onclick="deleteMenuItem(${item.id})" class="text-xs bg-red-100 text-red-700 px-2 py-1 rounded">Delete</button>
-                            </div>
-                        ` : ''}
-                    </div>
-                    <p class="text-sm text-gray-500 mt-1">${item.description}</p>
-                    <p class="text-lg font-bold text-gray-900 mt-2">$${item.price.toFixed(2)}</p>
-                    ${!isMenuEditMode && item.available ? `
-                        <div class="quantity-controls mt-3 flex items-center justify-between">
-                            <div class="flex items-center gap-2">
-                                <button onclick="removeFromCurrentOrder(${item.id})" class="w-8 h-8 rounded-full bg-gray-200 hover:bg-gray-300 flex items-center justify-center">-</button>
-                                <span id="order-qty-${item.id}" class="w-8 text-center">0</span>
-                                <button onclick="addToCurrentOrder(${item.id})" class="w-8 h-8 rounded-full bg-black text-white hover:bg-gray-800 flex items-center justify-center">+</button>
-                            </div>
-                        </div>
-                    ` : ''}
-                    ${!item.available ? '<p class="text-xs text-red-500 mt-2">Currently unavailable</p>' : ''}
-                </div>
-            `).join('');
-        }
-
-        // Render table selection for orders
-        function renderOrderTableSelection() {
-            const container = document.getElementById('orderTableSelection');
-            container.innerHTML = tables.filter(table => table.status === 'occupied' || table.status === 'available').map(table => `
-                <div class="table-card border-2 rounded-lg p-3 text-center cursor-pointer ${getTableStatusClass(table.status)} ${currentOrder.table === table.number ? 'ring-2 ring-blue-500' : ''}"
-                     onclick="selectTableForOrder(${table.number})">
-                    <div class="text-sm font-medium">Table ${table.number}</div>
-                    ${table.customer ? `
-                        <div class="text-xs text-gray-600 mt-1">
-                            ${table.customer}<br>Party of ${table.partySize}
-                        </div>
-                    ` : '<div class="text-xs text-gray-500 mt-1">Available</div>'}
-                </div>
-            `).join('');
-        }
-
-        // Order management for Orders tab
-        function selectTableForOrder(tableNumber) {
-            currentOrder.table = tableNumber;
-            renderOrderTableSelection();
-            updateCurrentOrderDisplay();
-        }
-
-        function addToCurrentOrder(itemId) {
-            if (!currentOrder.table) {
-                alert('Please select a table first');
-                return;
-            }
-
-            const item = menuItems.find(m => m.id === itemId);
-            const existingItem = currentOrder.items.find(i => i.id === itemId);
-
-            if (existingItem) {
-                existingItem.quantity += 1;
-            } else {
-                currentOrder.items.push({
-                    id: itemId,
-                    name: item.name,
-                    price: item.price,
-                    quantity: 1
-                });
-            }
-
-            updateCurrentOrderDisplay();
-        }
-
-        function removeFromCurrentOrder(itemId) {
-            const existingItem = currentOrder.items.find(i => i.id === itemId);
-
-            if (existingItem) {
-                existingItem.quantity -= 1;
-                if (existingItem.quantity <= 0) {
-                    currentOrder.items = currentOrder.items.filter(i => i.id !== itemId);
-                }
-            }
-
-            updateCurrentOrderDisplay();
-        }
-
-        function updateCurrentOrderDisplay() {
-            // Update quantity displays
-            menuItems.forEach(item => {
-                const orderItem = currentOrder.items.find(i => i.id === item.id);
-                const qtyElement = document.getElementById(`order-qty-${item.id}`);
-                if (qtyElement) {
-                    qtyElement.textContent = orderItem ? orderItem.quantity : 0;
-                }
-            });
-
-            // Update order summary
-            const orderSummarySection = document.getElementById('orderSummarySection');
-            const orderSummary = document.getElementById('currentOrderSummary');
-            const orderTotal = document.getElementById('currentOrderTotal');
-            const submitOrderBtn = document.getElementById('submitOrderBtn');
-
-            if (currentOrder.items.length === 0) {
-                orderSummarySection.style.display = 'none';
-                submitOrderBtn.disabled = true;
-            } else {
-                orderSummarySection.style.display = 'block';
-                orderSummary.innerHTML = currentOrder.items.map(item => `
-                    <div class="flex justify-between items-center py-2 border-b border-gray-100">
-                        <div>
-                            <span class="text-sm font-medium">${item.name}</span>
-                            <span class="text-sm text-gray-500"> x${item.quantity}</span>
-                        </div>
-                        <span class="text-sm font-medium">$${(item.price * item.quantity).toFixed(2)}</span>
-                    </div>
-                `).join('');
-
-                const total = currentOrder.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
-                orderTotal.textContent = `$${total.toFixed(2)}`;
-                currentOrder.total = total;
-                submitOrderBtn.disabled = !currentOrder.table;
-            }
-        }
-
-        async function submitOrder() {
-            if (!currentOrder.table || currentOrder.items.length === 0) return;
-
-            const table = tables.find(t => t.number === currentOrder.table);
-            const orderData = {
-                id: orderCounter++,
-                table: currentOrder.table,
-                customer: table.customer || 'Walk-in',
-                items: currentOrder.items,
-                total: currentOrder.total,
-                status: 'preparing',
-                timestamp: new Date().toISOString()
-            };
-
-            try {
-                const newOrder = await submitOrderToBackend(orderData);
-                activeOrders.push(newOrder);
-
-                // Reset current order
-                currentOrder = { table: null, customer: '', items: [], total: 0 };
-
-                // Update displays
-                renderOrders();
-                renderOrderTableSelection();
-                updateCurrentOrderDisplay();
-                renderCustomerOrders();
-
-                alert(`Order #${newOrder.id} submitted successfully for Table ${newOrder.table}!`);
-            } catch (error) {
-                alert('Error submitting order. Please try again.');
-            }
-        }
-
-        function renderCustomerOrders() {
-            const container = document.getElementById('customerOrdersList');
-            if (!container) return;
-
-            container.innerHTML = activeOrders.map(order => `
-                <div class="border border-gray-200 rounded-lg p-4">
-                    <div class="flex justify-between items-start mb-4">
-                        <div>
-                            <h4 class="font-medium text-gray-900">Order #${order.id}</h4>
-                            <p class="text-sm text-gray-500">Table ${order.table} - ${order.customer}</p>
-                            <p class="text-sm text-gray-500">${new Date(order.timestamp).toLocaleString()}</p>
-                        </div>
-                        <span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${
-                            order.status === 'preparing' ? 'bg-yellow-100 text-yellow-800' :
-                            order.status === 'ready' ? 'bg-green-100 text-green-800' :
-                            'bg-gray-100 text-gray-800'
-                        }">
-                            ${order.status.charAt(0).toUpperCase() + order.status.slice(1)}
-                        </span>
-                    </div>
-                    <div class="space-y-2 mb-4">
-                        ${order.items.map(item => `
-                            <div class="flex justify-between items-center">
-                                <div class="flex items-center gap-2">
-                                    <button onclick="modifyOrderItem(${order.id}, ${item.id}, -1)" class="text-gray-500 hover:text-gray-700">-</button>
-                                    <span class="text-sm">${item.name} x${item.quantity}</span>
-                                    <button onclick="modifyOrderItem(${order.id}, ${item.id}, 1)" class="text-gray-500 hover:text-gray-700">+</button>
-                                </div>
-                                <span class="text-sm font-medium">$${(item.price * item.quantity).toFixed(2)}</span>
-                            </div>
-                        `).join('')}
-                        <div class="mt-3 pt-3 border-t border-gray-200">
-                            <button onclick="showAddItemModal(${order.id})" class="w-full text-sm bg-blue-100 text-blue-700 py-2 px-3 rounded-md hover:bg-blue-200">
-                                + Add New Item
-                            </button>
-                        </div>
-                    </div>
-                    <div class="border-t pt-4">
-                        <div class="flex justify-between items-center mb-4">
-                            <span class="font-medium">Total:</span>
-                            <span class="font-bold">$${order.total.toFixed(2)}</span>
-                        </div>
-                        <div class="flex gap-2">
-                            <button onclick="updateOrderStatus(${order.id}, 'ready')" class="flex-1 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 text-sm">
-                                Mark Ready
-                            </button>
-                            <button onclick="cancelOrder(${order.id})" class="flex-1 bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 text-sm">
-                                Cancel Order
-                            </button>
-                        </div>
-                    </div>
-                </div>
-            `).join('');
-        }
-
-        function modifyOrderItem(orderId, itemId, change) {
-            const order = activeOrders.find(o => o.id === orderId);
-            if (!order) return;
-
-            const item = order.items.find(i => i.id === itemId);
-            if (!item) return;
-
-            item.quantity += change;
-
-            if (item.quantity <= 0) {
-                order.items = order.items.filter(i => i.id !== itemId);
-            }
-
-            // Recalculate total
-            order.total = order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
-
-            renderCustomerOrders();
-        }
-
-        function updateOrderStatus(orderId, status) {
-            const order = activeOrders.find(o => o.id === orderId);
-            if (!order) return;
-
-            order.status = status;
-            renderCustomerOrders();
-        }
-
-        function cancelOrder(orderId) {
-            if (!confirm('Are you sure you want to cancel this order?')) return;
-
-            activeOrders = activeOrders.filter(o => o.id !== orderId);
-            renderCustomerOrders();
-        }
-
-        function seatReservation(tableNumber) {
-            const table = tables.find(t => t.number === tableNumber);
-            if (!table || table.status !== 'reserved') return;
-
-            table.status = 'occupied';
-            delete table.reservationTime;
-
-            renderTables();
-            loadReservations();
-        }
-
-        function cancelReservation(tableNumber) {
-            const table = tables.find(t => t.number === tableNumber);
-            if (!table || table.status !== 'reserved') return;
-
-            if (!confirm(`Are you sure you want to cancel the reservation for Table ${tableNumber}?`)) return;
-
-            table.status = 'available';
-            delete table.customer;
-            delete table.partySize;
-            delete table.reservationTime;
-
-            renderTables();
-            loadReservations();
-            loadAvailableTablesForReservation();
-        }
-
-        // Menu editing functions
-        let isMenuEditMode = false;
-
-        function toggleMenuEdit() {
-            isMenuEditMode = !isMenuEditMode;
-            const editBtn = document.getElementById('editMenuBtn');
-            const addForm = document.getElementById('addMenuItemForm');
-
-            if (isMenuEditMode) {
-                editBtn.textContent = 'Done Editing';
-                editBtn.classList.add('bg-red-100', 'text-red-700');
-                addForm.classList.remove('hidden');
-            } else {
-                editBtn.textContent = 'Edit Menu';
-                editBtn.classList.remove('bg-red-100', 'text-red-700');
-                addForm.classList.add('hidden');
-            }
-
-            loadMenuItemsForOrdering();
-        }
-
-        function addNewMenuItem() {
-            const name = document.getElementById('newItemName').value;
-            const price = parseFloat(document.getElementById('newItemPrice').value);
-            const description = document.getElementById('newItemDescription').value;
-
-            if (!name || !price || !description) {
-                alert('Please fill in all fields');
-                return;
-            }
-
-            const newItem = {
-                id: Math.max(...menuItems.map(item => item.id)) + 1,
-                name: name,
-                description: description,
-                price: price,
-                category: 'Custom',
-                available: true
-            };
-
-            menuItems.push(newItem);
-            loadMenuItemsForOrdering();
-
-            // Clear form
-            document.getElementById('newItemName').value = '';
-            document.getElementById('newItemPrice').value = '';
-            document.getElementById('newItemDescription').value = '';
-        }
-
-        function cancelAddMenuItem() {
-            document.getElementById('newItemName').value = '';
-            document.getElementById('newItemPrice').value = '';
-            document.getElementById('newItemDescription').value = '';
-        }
-
-        function editMenuItem(itemId) {
-            const item = menuItems.find(m => m.id === itemId);
-            if (!item) return;
-
-            const newName = prompt('Edit item name:', item.name);
-            if (newName !== null && newName.trim() !== '') {
-                item.name = newName.trim();
-            }
-
-            const newPrice = prompt('Edit item price:', item.price);
-            if (newPrice !== null && !isNaN(parseFloat(newPrice))) {
-                item.price = parseFloat(newPrice);
-            }
-
-            const newDescription = prompt('Edit item description:', item.description);
-            if (newDescription !== null && newDescription.trim() !== '') {
-                item.description = newDescription.trim();
-            }
-
-            loadMenuItemsForOrdering();
-        }
-
-        function deleteMenuItem(itemId) {
-            if (!confirm('Are you sure you want to delete this menu item?')) return;
-
-            menuItems = menuItems.filter(item => item.id !== itemId);
-            loadMenuItemsForOrdering();
-        }
-
-        function toggleMenuItemAvailability(itemId) {
-            const item = menuItems.find(m => m.id === itemId);
-            if (item) {
-                item.available = !item.available;
-                loadMenuItemsForOrdering();
-            }
-        }
-
-        // Reservation functions
-        function loadAvailableTablesForReservation() {
-            const select = document.getElementById('reservationTable');
-            const availableTables = tables.filter(table => table.status === 'available');
-
-            select.innerHTML = '<option value="">Select a table</option>' +
-                availableTables.map(table =>
-                    `<option value="${table.number}">Table ${table.number}</option>`
-                ).join('');
-        }
-
-        // Form submission handler for new reservations
-        document.addEventListener('DOMContentLoaded', function() {
-            const reservationForm = document.getElementById('newReservationForm');
-            if (reservationForm) {
-                reservationForm.addEventListener('submit', function(e) {
-                    e.preventDefault();
-
-                    const formData = new FormData(e.target);
-                    const tableNumber = parseInt(formData.get('table'));
-                    const customer = formData.get('customer');
-                    const partySize = parseInt(formData.get('partySize'));
-                    const dateTime = formData.get('dateTime');
-
-                    if (!tableNumber || !customer || !partySize || !dateTime) {
-                        alert('Please fill in all fields');
-                        return;
-                    }
-
-                    const table = tables.find(t => t.number === tableNumber);
-                    if (!table || table.status !== 'available') {
-                        alert('Selected table is not available');
-                        return;
-                    }
-
-                    // Create reservation
-                    table.status = 'reserved';
-                    table.customer = customer;
-                    table.partySize = partySize;
-                    table.reservationTime = dateTime;
-
-                    // Update displays
-                    renderTables();
-                    loadReservations();
-                    loadAvailableTablesForReservation();
-
-                    // Reset form
-                    e.target.reset();
-
-                    alert(`Reservation created successfully for ${customer} at Table ${tableNumber}`);
-                });
-            }
-        });
-
-        // Function to render tables
-        function renderTables() {
-            const layout = document.getElementById('tableLayout');
-
-            const tableElements = tables.map(table => `
-                <div class="table-card border-2 rounded-lg p-4 text-center ${getTableStatusClass(table.status)}" onclick="openTableModal(${table.number})">
-                    <div class="text-sm font-medium mb-2">Table ${table.number}</div>
-                    ${table.customer ? `
-                        <div class="text-xs text-gray-600">
-                            <div>${table.customer}</div>
-                            <div>Party of ${table.partySize}</div>
-                            ${table.reservationTime ? `<div class="mt-1">Reserved: ${formatTime(table.reservationTime)}</div>` : ''}
-                        </div>
-                    ` : '<div class="text-xs text-gray-500">Available</div>'}
-                </div>
-            `).join('');
-
-            // Add counter area
-            const counterElement = `
-                <div class="counter-area">
-                    <div class="border-2 border-gray-300 rounded-lg p-4 text-center bg-gray-100">
-                        <span class="text-sm font-medium">Counter Area</span>
-                    </div>
-                </div>
-            `;
-
-            layout.innerHTML = tableElements + counterElement;
-        }
-
-        // Function to render active orders
-        function renderOrders() {
-            const ordersTable = document.getElementById('activeOrders');
-            ordersTable.innerHTML = activeOrders.map(order => `
-                <tr>
-                    <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900">#${order.id}</td>
-                    <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">Table ${order.table}</td>
-                    <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">${order.customer}</td>
-                    <td class="px-3 py-4 text-sm text-gray-500">
-                        <ul>
-                            ${order.items.map(item => `<li>${item.name} (${item.quantity}x)</li>`).join('')}
-                        </ul>
-                    </td>
-                    <td class="whitespace-nowrap px-3 py-4 text-sm">
-                        <span class="inline-flex rounded-full ${
-                            order.status === 'preparing' ? 'bg-yellow-100 text-yellow-800' :
-                            order.status === 'ready' ? 'bg-green-100 text-green-800' :
-                            'bg-gray-100 text-gray-800'
-                        } px-2 text-xs font-semibold leading-5">
-                            ${order.status.charAt(0).toUpperCase() + order.status.slice(1)}
-                        </span>
-                    </td>
-                    <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">$${order.total.toFixed(2)}</td>
-                    <td class="whitespace-nowrap px-3 py-4 text-sm">
-                        <button onclick="updateOrderFromTable(${order.id})" class="text-indigo-600 hover:text-indigo-900 font-medium">Update</button>
-                        <button onclick="cancelOrderFromTable(${order.id})" class="ml-4 text-red-600 hover:text-red-900 font-medium">Cancel</button>
-                    </td>
-                </tr>
-            `).join('');
-        }
-
-        function updateOrderFromTable(orderId) {
-            const order = activeOrders.find(o => o.id === orderId);
-            if (!order) return;
-
-            const newStatus = prompt(`Update status for Order #${orderId}:\n1. preparing\n2. ready\n3. completed\n\nEnter new status:`, order.status);
-            if (newStatus && ['preparing', 'ready', 'completed'].includes(newStatus.toLowerCase())) {
-                order.status = newStatus.toLowerCase();
-                renderOrders();
-                renderCustomerOrders();
-            }
-        }
-
-        function cancelOrderFromTable(orderId) {
-            if (!confirm(`Are you sure you want to cancel Order #${orderId}?`)) return;
-
-            activeOrders = activeOrders.filter(o => o.id !== orderId);
-            renderOrders();
-            renderCustomerOrders();
-        }
-
-        // Load reservations
-        function loadReservations() {
-            const reservationsList = document.getElementById('reservationsList');
-            const reservations = tables.filter(table => table.status === 'reserved');
-
-            reservationsList.innerHTML = reservations.map(table => `
-                <tr>
-                    <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900">Table ${table.number}</td>
-                    <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">${table.customer}</td>
-                    <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">${table.partySize}</td>
-                    <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">${formatDateTime(table.reservationTime)}</td>
-                    <td class="whitespace-nowrap px-3 py-4 text-sm">
-                        <span class="inline-flex rounded-full bg-orange-100 px-2 text-xs font-semibold leading-5 text-orange-800">
-                            Reserved
-                        </span>
-                    </td>
-                    <td class="whitespace-nowrap px-3 py-4 text-sm">
-                        <button onclick="seatReservation(${table.number})" class="text-indigo-600 hover:text-indigo-900 font-medium">Seat</button>
-                        <button onclick="cancelReservation(${table.number})" class="ml-4 text-red-600 hover:text-red-900 font-medium">Cancel</button>
-                    </td>
-                </tr>
-            `).join('');
-        }
-
-        // Helper functions
-        function getTableStatusClass(status) {
-            switch(status) {
-                case 'occupied': return 'table-occupied';
-                case 'reserved': return 'table-reserved';
-                default: return 'table-available';
-            }
-        }
-
-        function formatTime(datetime) {
-            return new Date(datetime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
-        }
-
-        function formatDateTime(datetime) {
-            return new Date(datetime).toLocaleString([], {
-                month: 'short',
-                day: 'numeric',
-                hour: '2-digit',
-                minute: '2-digit'
-            });
-        }
-
-        function openTableModal(tableNumber) {
-            const table = tables.find(t => t.number === tableNumber);
-            document.getElementById('tableNumber').value = tableNumber;
-            document.getElementById('modalTitle').textContent = `Table ${tableNumber} - ${table.status.charAt(0).toUpperCase() + table.status.slice(1)}`;
-
-            if (table.customer) {
-                document.getElementById('customerName').value = table.customer;
-                document.getElementById('partySize').value = table.partySize;
-            }
-
-            document.getElementById('tableModal').classList.add('show');
-        }
-
-        function closeModal() {
-            document.getElementById('tableModal').classList.remove('show');
-            document.getElementById('tableActionForm').reset();
-        }
-
-        function toggleCustomerFields() {
-            const actionType = document.getElementById('actionType').value;
-            const customerFields = document.getElementById('customerFields');
-            const reservationField = document.getElementById('reservationTimeField');
-
-            customerFields.style.display = actionType === 'clear' ? 'none' : 'block';
-            reservationField.classList.toggle('hidden', actionType !== 'reserve');
-        }
-
-        // Add item to existing order functions
-        let currentOrderIdForAddItem = null;
-
-        function showAddItemModal(orderId) {
-            currentOrderIdForAddItem = orderId;
-            const order = activeOrders.find(o => o.id === orderId);
-            if (!order) return;
-
-            document.getElementById('addItemModalTitle').textContent = `Add Item to Order #${orderId} (Table ${order.table})`;
-
-            // Load menu items in the modal
-            loadMenuItemsForAddItem();
-
-            document.getElementById('addItemModal').classList.add('show');
-        }
-
-        function closeAddItemModal() {
-            document.getElementById('addItemModal').classList.remove('show');
-            currentOrderIdForAddItem = null;
-        }
-
-        async function loadMenuItemsForAddItem() {
-            const container = document.getElementById('addItemMenuList');
-
-            if (menuItems.length === 0) {
-                menuItems = await fetchMenuItems();
-            }
-
-            container.innerHTML = menuItems.filter(item => item.available).map(item => `
-                <div class="border border-gray-200 rounded-lg p-3">
-                    <div class="flex justify-between items-start">
-                        <div class="flex-1">
-                            <h5 class="font-medium text-gray-900">${item.name}</h5>
-                            <p class="text-sm text-gray-500 mt-1">${item.description}</p>
-                            <p class="text-lg font-bold text-gray-900 mt-2">$${item.price.toFixed(2)}</p>
-                        </div>
-                        <div class="ml-4 flex items-center gap-2">
-                            <button onclick="addItemToExistingOrder(${item.id}, 1)" class="bg-blue-600 text-white px-3 py-1 rounded-md hover:bg-blue-700 text-sm">
-                                Add
-                            </button>
-                        </div>
-                    </div>
-                </div>
-            `).join('');
-        }
-
-        function addItemToExistingOrder(itemId, quantity = 1) {
-            if (!currentOrderIdForAddItem) return;
-
-            const order = activeOrders.find(o => o.id === currentOrderIdForAddItem);
-            const menuItem = menuItems.find(m => m.id === itemId);
-
-            if (!order || !menuItem) return;
-
-            // Check if item already exists in order
-            const existingItem = order.items.find(i => i.id === itemId);
-
-            if (existingItem) {
-                existingItem.quantity += quantity;
-            } else {
-                order.items.push({
-                    id: itemId,
-                    name: menuItem.name,
-                    price: menuItem.price,
-                    quantity: quantity
-                });
-            }
-
-            // Recalculate total
-            order.total = order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
-
-            // Update displays
-            renderCustomerOrders();
-            renderOrders();
-
-            // Close modal
-            closeAddItemModal();
-
-            alert(`${menuItem.name} added to Order #${currentOrderIdForAddItem}!`);
-        }
-
-        // Form submission handlers
-        document.getElementById('tableActionForm').addEventListener('submit', function(e) {
-            e.preventDefault();
-            const formData = new FormData(e.target);
-            const tableNumber = parseInt(formData.get('tableNumber'));
-            const actionType = formData.get('actionType');
-            const table = tables.find(t => t.number === tableNumber);
-
-            if (table) {
-                switch(actionType) {
-                    case 'seat':
-                        table.status = 'occupied';
-                        table.customer = formData.get('customerName');
-                        table.partySize = parseInt(formData.get('partySize'));
-                        delete table.reservationTime;
-                        break;
-                    case 'reserve':
-                        table.status = 'reserved';
-                        table.customer = formData.get('customerName');
-                        table.partySize = parseInt(formData.get('partySize'));
-                        table.reservationTime = formData.get('reservationTime');
-                        break;
-                    case 'clear':
-                        table.status = 'available';
-                        delete table.customer;
-                        delete table.partySize;
-                        delete table.reservationTime;
-                        break;
-                    case 'order':
-                        closeModal();
-                        const orderTab = document.querySelector('.tab-button[data-tab="orders"]');
-                        orderTab.click();
-                        selectTableForOrder(tableNumber);
-                        return;
-                }
-                renderTables();
-                closeModal();
-            }
-        });
-    </script>
-</body>
-</html>
Index: core/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/views.py b/core/views.py
deleted file mode 100644
--- a/core/views.py	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,4 +0,0 @@
-from django.shortcuts import render
-
-def home(request):
-    return render(request, 'index.html')
Index: frontend/admin.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/admin.html b/frontend/admin.html
deleted file mode 100644
--- a/frontend/admin.html	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,976 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Restaurant Management System - Admin</title>
-    <link rel="stylesheet" href="css/style.css">
-    <style>
-        .admin-grid {
-            display: grid;
-            grid-template-columns: 1fr 1fr;
-            gap: 2rem;
-            margin-top: 2rem;
-        }
-
-        .admin-section {
-            background: white;
-            border-radius: 8px;
-            padding: 1.5rem;
-            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
-        }
-
-        .section-header {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            margin-bottom: 1rem;
-            padding-bottom: 1rem;
-            border-bottom: 1px solid #ecf0f1;
-        }
-
-        .section-title {
-            font-size: 1.3rem;
-            color: #2c3e50;
-            margin: 0;
-        }
-
-        .admin-table {
-            width: 100%;
-            border-collapse: collapse;
-            margin-top: 1rem;
-        }
-
-        .admin-table th,
-        .admin-table td {
-            padding: 0.75rem;
-            text-align: left;
-            border-bottom: 1px solid #ecf0f1;
-            font-size: 0.9rem;
-        }
-
-        .admin-table th {
-            background-color: #f8f9fa;
-            font-weight: 600;
-            color: #2c3e50;
-        }
-
-        .admin-table tbody tr:hover {
-            background-color: #f8f9fa;
-        }
-
-        .action-buttons {
-            display: flex;
-            gap: 0.25rem;
-        }
-
-        .btn-sm {
-            padding: 0.25rem 0.5rem;
-            font-size: 0.8rem;
-        }
-
-        .form-modal {
-            position: fixed;
-            top: 0;
-            left: 0;
-            width: 100%;
-            height: 100%;
-            background: rgba(0,0,0,0.5);
-            z-index: 1000;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-        }
-
-        .modal-content {
-            background: white;
-            border-radius: 8px;
-            padding: 2rem;
-            max-width: 500px;
-            width: 90%;
-            max-height: 80vh;
-            overflow-y: auto;
-        }
-
-        .modal-header {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            margin-bottom: 1rem;
-            padding-bottom: 1rem;
-            border-bottom: 1px solid #ecf0f1;
-        }
-
-        .close-btn {
-            background: none;
-            border: none;
-            font-size: 1.5rem;
-            cursor: pointer;
-            color: #7f8c8d;
-        }
-
-        .close-btn:hover {
-            color: #2c3e50;
-        }
-
-        .form-grid {
-            display: grid;
-            grid-template-columns: 1fr 1fr;
-            gap: 1rem;
-        }
-
-        .form-grid-full {
-            grid-column: 1 / -1;
-        }
-
-        .availability-toggle {
-            display: flex;
-            align-items: center;
-            gap: 0.5rem;
-        }
-
-        .toggle-switch {
-            position: relative;
-            width: 50px;
-            height: 25px;
-            background: #ccc;
-            border-radius: 25px;
-            cursor: pointer;
-            transition: background 0.3s;
-        }
-
-        .toggle-switch.active {
-            background: #27ae60;
-        }
-
-        .toggle-slider {
-            position: absolute;
-            top: 2px;
-            left: 2px;
-            width: 21px;
-            height: 21px;
-            background: white;
-            border-radius: 50%;
-            transition: transform 0.3s;
-        }
-
-        .toggle-switch.active .toggle-slider {
-            transform: translateX(25px);
-        }
-
-        .stats-overview {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
-            gap: 1rem;
-            margin-bottom: 2rem;
-        }
-
-        .overview-card {
-            background: white;
-            padding: 1rem;
-            border-radius: 8px;
-            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
-            text-align: center;
-        }
-
-        .overview-number {
-            font-size: 1.5rem;
-            font-weight: bold;
-            color: #2c3e50;
-            margin-bottom: 0.25rem;
-        }
-
-        .overview-label {
-            color: #7f8c8d;
-            font-size: 0.9rem;
-        }
-
-        @media (max-width: 768px) {
-            .admin-grid {
-                grid-template-columns: 1fr;
-            }
-            
-            .form-grid {
-                grid-template-columns: 1fr;
-            }
-            
-            .stats-overview {
-                grid-template-columns: 1fr 1fr;
-            }
-        }
-    </style>
-</head>
-<body>
-    <!-- Navigation -->
-    <nav class="navbar">
-        <div class="nav-container">
-            <a href="index.html" class="logo">RMS Dashboard</a>
-            <ul class="nav-links">
-                <li><a href="index.html">Dashboard</a></li>
-                <li><a href="tables.html">Tables</a></li>
-                <li><a href="menu.html">Menu</a></li>
-                <li><a href="orders.html">Orders</a></li>
-                <li><a href="inventory.html">Inventory</a></li>
-                <li><a href="admin.html" class="active">Admin</a></li>
-            </ul>
-        </div>
-    </nav>
-
-    <!-- Main Content -->
-    <div class="container">
-        <div class="page-header">
-            <h1 class="page-title">Admin Panel</h1>
-            <p class="page-subtitle">Manage menu items, categories, and system settings</p>
-        </div>
-
-        <!-- Overview Statistics -->
-        <div class="stats-overview">
-            <div class="overview-card">
-                <div class="overview-number" id="totalMenuItems">0</div>
-                <div class="overview-label">Menu Items</div>
-            </div>
-            <div class="overview-card">
-                <div class="overview-number" id="totalCategories">0</div>
-                <div class="overview-label">Categories</div>
-            </div>
-            <div class="overview-card">
-                <div class="overview-number" id="totalCustomizations">0</div>
-                <div class="overview-label">Customizations</div>
-            </div>
-            <div class="overview-card">
-                <div class="overview-number" id="totalInventoryItems">0</div>
-                <div class="overview-label">Inventory Items</div>
-            </div>
-        </div>
-
-        <!-- Admin Sections -->
-        <div class="admin-grid">
-            <!-- Menu Items Management -->
-            <div class="admin-section">
-                <div class="section-header">
-                    <h3 class="section-title">Menu Items</h3>
-                    <button class="btn btn-primary btn-sm" onclick="adminManager.showMenuItemForm()">
-                        Add New Item
-                    </button>
-                </div>
-                <div id="menuItemsList">
-                    <div class="loading">Loading menu items...</div>
-                </div>
-            </div>
-
-            <!-- Categories Management -->
-            <div class="admin-section">
-                <div class="section-header">
-                    <h3 class="section-title">Categories</h3>
-                    <button class="btn btn-primary btn-sm" onclick="adminManager.showCategoryForm()">
-                        Add Category
-                    </button>
-                </div>
-                <div id="categoriesList">
-                    <div class="loading">Loading categories...</div>
-                </div>
-            </div>
-
-            <!-- Customizations Management -->
-            <div class="admin-section">
-                <div class="section-header">
-                    <h3 class="section-title">Customizations</h3>
-                    <button class="btn btn-primary btn-sm" onclick="adminManager.showCustomizationForm()">
-                        Add Customization
-                    </button>
-                </div>
-                <div id="customizationsList">
-                    <div class="loading">Loading customizations...</div>
-                </div>
-            </div>
-
-            <!-- Inventory Items Management -->
-            <div class="admin-section">
-                <div class="section-header">
-                    <h3 class="section-title">Inventory Items</h3>
-                    <button class="btn btn-primary btn-sm" onclick="adminManager.showInventoryItemForm()">
-                        Add Inventory Item
-                    </button>
-                </div>
-                <div id="inventoryItemsList">
-                    <div class="loading">Loading inventory items...</div>
-                </div>
-            </div>
-        </div>
-
-        <!-- Form Modal -->
-        <div id="formModal" class="form-modal hidden">
-            <div class="modal-content">
-                <div class="modal-header">
-                    <h3 id="modalTitle">Form</h3>
-                    <button type="button" class="close-btn" onclick="adminManager.closeModal()">&times;</button>
-                </div>
-                <div id="modalForm">
-                    <!-- Form content will be populated by JavaScript -->
-                </div>
-            </div>
-        </div>
-    </div>
-
-    <script src="js/api.js"></script>
-    <script>
-        class AdminManager {
-            constructor() {
-                this.menuItems = [];
-                this.categories = [];
-                this.customizations = [];
-                this.inventoryItems = [];
-                this.inventoryCategories = [];
-                this.currentEditId = null;
-                this.currentEditType = null;
-                this.init();
-            }
-
-            async init() {
-                await this.loadAllData();
-                this.renderAllSections();
-                this.updateOverviewStats();
-            }
-
-            async loadAllData() {
-                try {
-                    const [menuResponse, categoriesResponse, customizationsResponse, inventoryResponse, invCategoriesResponse] = await Promise.all([
-                        api.getMenuItems(),
-                        api.getCategories(),
-                        api.getCustomizations(),
-                        api.getInventoryItems(),
-                        api.getInventoryCategories()
-                    ]);
-
-                    this.menuItems = menuResponse.results || [];
-                    this.categories = categoriesResponse.results || [];
-                    this.customizations = customizationsResponse.results || [];
-                    this.inventoryItems = inventoryResponse.results || [];
-                    this.inventoryCategories = invCategoriesResponse.results || [];
-
-                } catch (error) {
-                    console.error('Error loading admin data:', error);
-                    showAlert('Error loading admin data. Please check your connection.', 'error');
-                }
-            }
-
-            renderAllSections() {
-                this.renderMenuItems();
-                this.renderCategories();
-                this.renderCustomizations();
-                this.renderInventoryItems();
-            }
-
-            updateOverviewStats() {
-                document.getElementById('totalMenuItems').textContent = this.menuItems.length;
-                document.getElementById('totalCategories').textContent = this.categories.length;
-                document.getElementById('totalCustomizations').textContent = this.customizations.length;
-                document.getElementById('totalInventoryItems').textContent = this.inventoryItems.length;
-            }
-
-            renderMenuItems() {
-                const container = document.getElementById('menuItemsList');
-                
-                if (this.menuItems.length === 0) {
-                    container.innerHTML = '<p class="text-center">No menu items found.</p>';
-                    return;
-                }
-
-                const html = `
-                    <table class="admin-table">
-                        <thead>
-                            <tr>
-                                <th>Name</th>
-                                <th>Price</th>
-                                <th>Category</th>
-                                <th>Status</th>
-                                <th>Actions</th>
-                            </tr>
-                        </thead>
-                        <tbody>
-                            ${this.menuItems.map(item => {
-                                const category = this.categories.find(cat => cat.id === item.category);
-                                return `
-                                    <tr>
-                                        <td>${item.name}</td>
-                                        <td>${formatCurrency(item.price)}</td>
-                                        <td>${category ? category.name : 'Unknown'}</td>
-                                        <td>
-                                            <span class="badge ${item.is_available ? 'badge-success' : 'badge-danger'}">
-                                                ${item.is_available ? 'Available' : 'Unavailable'}
-                                            </span>
-                                        </td>
-                                        <td>
-                                            <div class="action-buttons">
-                                                <button class="btn btn-warning btn-sm" onclick="adminManager.editMenuItem(${item.id})">Edit</button>
-                                                <button class="btn btn-danger btn-sm" onclick="adminManager.deleteMenuItem(${item.id})">Delete</button>
-                                            </div>
-                                        </td>
-                                    </tr>
-                                `;
-                            }).join('')}
-                        </tbody>
-                    </table>
-                `;
-
-                container.innerHTML = html;
-            }
-
-            renderCategories() {
-                const container = document.getElementById('categoriesList');
-                
-                if (this.categories.length === 0) {
-                    container.innerHTML = '<p class="text-center">No categories found.</p>';
-                    return;
-                }
-
-                const html = `
-                    <table class="admin-table">
-                        <thead>
-                            <tr>
-                                <th>Name</th>
-                                <th>Description</th>
-                                <th>Actions</th>
-                            </tr>
-                        </thead>
-                        <tbody>
-                            ${this.categories.map(category => `
-                                <tr>
-                                    <td>${category.name}</td>
-                                    <td>${category.description || 'No description'}</td>
-                                    <td>
-                                        <div class="action-buttons">
-                                            <button class="btn btn-warning btn-sm" onclick="adminManager.editCategory(${category.id})">Edit</button>
-                                            <button class="btn btn-danger btn-sm" onclick="adminManager.deleteCategory(${category.id})">Delete</button>
-                                        </div>
-                                    </td>
-                                </tr>
-                            `).join('')}
-                        </tbody>
-                    </table>
-                `;
-
-                container.innerHTML = html;
-            }
-
-            renderCustomizations() {
-                const container = document.getElementById('customizationsList');
-                
-                if (this.customizations.length === 0) {
-                    container.innerHTML = '<p class="text-center">No customizations found.</p>';
-                    return;
-                }
-
-                const html = `
-                    <table class="admin-table">
-                        <thead>
-                            <tr>
-                                <th>Name</th>
-                                <th>Price</th>
-                                <th>Category</th>
-                                <th>Status</th>
-                                <th>Actions</th>
-                            </tr>
-                        </thead>
-                        <tbody>
-                            ${this.customizations.map(custom => {
-                                const category = this.categories.find(cat => cat.id === custom.category);
-                                return `
-                                    <tr>
-                                        <td>${custom.name}</td>
-                                        <td>${formatCurrency(custom.price)}</td>
-                                        <td>${category ? category.name : 'Unknown'}</td>
-                                        <td>
-                                            <span class="badge ${custom.is_available ? 'badge-success' : 'badge-danger'}">
-                                                ${custom.is_available ? 'Available' : 'Unavailable'}
-                                            </span>
-                                        </td>
-                                        <td>
-                                            <div class="action-buttons">
-                                                <button class="btn btn-warning btn-sm" onclick="adminManager.editCustomization(${custom.id})">Edit</button>
-                                                <button class="btn btn-danger btn-sm" onclick="adminManager.deleteCustomization(${custom.id})">Delete</button>
-                                            </div>
-                                        </td>
-                                    </tr>
-                                `;
-                            }).join('')}
-                        </tbody>
-                    </table>
-                `;
-
-                container.innerHTML = html;
-            }
-
-            renderInventoryItems() {
-                const container = document.getElementById('inventoryItemsList');
-                
-                if (this.inventoryItems.length === 0) {
-                    container.innerHTML = '<p class="text-center">No inventory items found.</p>';
-                    return;
-                }
-
-                const html = `
-                    <table class="admin-table">
-                        <thead>
-                            <tr>
-                                <th>Name</th>
-                                <th>Quantity</th>
-                                <th>Unit</th>
-                                <th>Category</th>
-                                <th>Actions</th>
-                            </tr>
-                        </thead>
-                        <tbody>
-                            ${this.inventoryItems.slice(0, 10).map(item => {
-                                const category = this.inventoryCategories.find(cat => cat.id === item.category);
-                                return `
-                                    <tr>
-                                        <td>${item.name}</td>
-                                        <td>${item.quantity}</td>
-                                        <td>${item.unit}</td>
-                                        <td>${category ? category.name : 'Unknown'}</td>
-                                        <td>
-                                            <div class="action-buttons">
-                                                <button class="btn btn-warning btn-sm" onclick="adminManager.editInventoryItem(${item.id})">Edit</button>
-                                                <button class="btn btn-danger btn-sm" onclick="adminManager.deleteInventoryItem(${item.id})">Delete</button>
-                                            </div>
-                                        </td>
-                                    </tr>
-                                `;
-                            }).join('')}
-                        </tbody>
-                    </table>
-                    ${this.inventoryItems.length > 10 ? '<p class="text-center mt-2"><small>Showing first 10 items</small></p>' : ''}
-                `;
-
-                container.innerHTML = html;
-            }
-
-            // Form Methods
-            showMenuItemForm(item = null) {
-                this.currentEditType = 'menuItem';
-                this.currentEditId = item ? item.id : null;
-
-                const modalTitle = document.getElementById('modalTitle');
-                const modalForm = document.getElementById('modalForm');
-
-                modalTitle.textContent = item ? 'Edit Menu Item' : 'Add New Menu Item';
-
-                modalForm.innerHTML = `
-                    <form id="menuItemForm">
-                        <div class="form-grid">
-                            <div class="form-group">
-                                <label class="form-label">Name:</label>
-                                <input type="text" id="itemName" class="form-control" value="${item ? item.name : ''}" required>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Price:</label>
-                                <input type="number" id="itemPrice" class="form-control" step="0.01" min="0" value="${item ? item.price : ''}" required>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Category:</label>
-                                <select id="itemCategory" class="form-control" required>
-                                    <option value="">Select Category</option>
-                                    ${this.categories.map(cat => 
-                                        `<option value="${cat.id}" ${item && item.category === cat.id ? 'selected' : ''}>${cat.name}</option>`
-                                    ).join('')}
-                                </select>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Available:</label>
-                                <div class="availability-toggle">
-                                    <div class="toggle-switch ${item ? (item.is_available ? 'active' : '') : 'active'}" onclick="this.classList.toggle('active')">
-                                        <div class="toggle-slider"></div>
-                                    </div>
-                                    <span>Available for ordering</span>
-                                </div>
-                            </div>
-                            <div class="form-group form-grid-full">
-                                <label class="form-label">Description:</label>
-                                <textarea id="itemDescription" class="form-control" rows="3">${item ? (item.description || '') : ''}</textarea>
-                            </div>
-                        </div>
-                        <div class="form-group mt-3">
-                            <button type="submit" class="btn btn-success">${item ? 'Update' : 'Create'} Menu Item</button>
-                            <button type="button" class="btn btn-secondary" onclick="adminManager.closeModal()">Cancel</button>
-                        </div>
-                    </form>
-                `;
-
-                document.getElementById('formModal').classList.remove('hidden');
-
-                // Add form submit handler
-                document.getElementById('menuItemForm').addEventListener('submit', (e) => {
-                    e.preventDefault();
-                    this.saveMenuItem();
-                });
-            }
-
-            showCategoryForm(category = null) {
-                this.currentEditType = 'category';
-                this.currentEditId = category ? category.id : null;
-
-                const modalTitle = document.getElementById('modalTitle');
-                const modalForm = document.getElementById('modalForm');
-
-                modalTitle.textContent = category ? 'Edit Category' : 'Add New Category';
-
-                modalForm.innerHTML = `
-                    <form id="categoryForm">
-                        <div class="form-group">
-                            <label class="form-label">Name:</label>
-                            <input type="text" id="categoryName" class="form-control" value="${category ? category.name : ''}" required>
-                        </div>
-                        <div class="form-group">
-                            <label class="form-label">Description:</label>
-                            <textarea id="categoryDescription" class="form-control" rows="3">${category ? (category.description || '') : ''}</textarea>
-                        </div>
-                        <div class="form-group mt-3">
-                            <button type="submit" class="btn btn-success">${category ? 'Update' : 'Create'} Category</button>
-                            <button type="button" class="btn btn-secondary" onclick="adminManager.closeModal()">Cancel</button>
-                        </div>
-                    </form>
-                `;
-
-                document.getElementById('formModal').classList.remove('hidden');
-
-                document.getElementById('categoryForm').addEventListener('submit', (e) => {
-                    e.preventDefault();
-                    this.saveCategory();
-                });
-            }
-
-            showCustomizationForm(customization = null) {
-                this.currentEditType = 'customization';
-                this.currentEditId = customization ? customization.id : null;
-
-                const modalTitle = document.getElementById('modalTitle');
-                const modalForm = document.getElementById('modalForm');
-
-                modalTitle.textContent = customization ? 'Edit Customization' : 'Add New Customization';
-
-                modalForm.innerHTML = `
-                    <form id="customizationForm">
-                        <div class="form-grid">
-                            <div class="form-group">
-                                <label class="form-label">Name:</label>
-                                <input type="text" id="customName" class="form-control" value="${customization ? customization.name : ''}" required>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Price:</label>
-                                <input type="number" id="customPrice" class="form-control" step="0.01" min="0" value="${customization ? customization.price : ''}" required>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Category:</label>
-                                <select id="customCategory" class="form-control" required>
-                                    <option value="">Select Category</option>
-                                    ${this.categories.map(cat => 
-                                        `<option value="${cat.id}" ${customization && customization.category === cat.id ? 'selected' : ''}>${cat.name}</option>`
-                                    ).join('')}
-                                </select>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Available:</label>
-                                <div class="availability-toggle">
-                                    <div class="toggle-switch ${customization ? (customization.is_available ? 'active' : '') : 'active'}" onclick="this.classList.toggle('active')">
-                                        <div class="toggle-slider"></div>
-                                    </div>
-                                    <span>Available</span>
-                                </div>
-                            </div>
-                            <div class="form-group form-grid-full">
-                                <label class="form-label">Description:</label>
-                                <textarea id="customDescription" class="form-control" rows="3">${customization ? (customization.description || '') : ''}</textarea>
-                            </div>
-                        </div>
-                        <div class="form-group mt-3">
-                            <button type="submit" class="btn btn-success">${customization ? 'Update' : 'Create'} Customization</button>
-                            <button type="button" class="btn btn-secondary" onclick="adminManager.closeModal()">Cancel</button>
-                        </div>
-                    </form>
-                `;
-
-                document.getElementById('formModal').classList.remove('hidden');
-
-                document.getElementById('customizationForm').addEventListener('submit', (e) => {
-                    e.preventDefault();
-                    this.saveCustomization();
-                });
-            }
-
-            showInventoryItemForm(item = null) {
-                this.currentEditType = 'inventoryItem';
-                this.currentEditId = item ? item.id : null;
-
-                const modalTitle = document.getElementById('modalTitle');
-                const modalForm = document.getElementById('modalForm');
-
-                modalTitle.textContent = item ? 'Edit Inventory Item' : 'Add New Inventory Item';
-
-                modalForm.innerHTML = `
-                    <form id="inventoryItemForm">
-                        <div class="form-grid">
-                            <div class="form-group">
-                                <label class="form-label">Name:</label>
-                                <input type="text" id="invItemName" class="form-control" value="${item ? item.name : ''}" required>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Unit:</label>
-                                <input type="text" id="invItemUnit" class="form-control" value="${item ? item.unit : ''}" placeholder="kg, pcs, liters, etc." required>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Quantity:</label>
-                                <input type="number" id="invItemQuantity" class="form-control" step="0.01" min="0" value="${item ? item.quantity : ''}" required>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Threshold:</label>
-                                <input type="number" id="invItemThreshold" class="form-control" step="0.01" min="0" value="${item ? item.threshold : ''}" required>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Category:</label>
-                                <select id="invItemCategory" class="form-control" required>
-                                    <option value="">Select Category</option>
-                                    ${this.inventoryCategories.map(cat => 
-                                        `<option value="${cat.id}" ${item && item.category === cat.id ? 'selected' : ''}>${cat.name}</option>`
-                                    ).join('')}
-                                </select>
-                            </div>
-                            <div class="form-group">
-                                <label class="form-label">Supplier:</label>
-                                <input type="text" id="invItemSupplier" class="form-control" value="${item ? (item.supplier || '') : ''}" placeholder="Optional">
-                            </div>
-                        </div>
-                        <div class="form-group mt-3">
-                            <button type="submit" class="btn btn-success">${item ? 'Update' : 'Create'} Inventory Item</button>
-                            <button type="button" class="btn btn-secondary" onclick="adminManager.closeModal()">Cancel</button>
-                        </div>
-                    </form>
-                `;
-
-                document.getElementById('formModal').classList.remove('hidden');
-
-                document.getElementById('inventoryItemForm').addEventListener('submit', (e) => {
-                    e.preventDefault();
-                    this.saveInventoryItem();
-                });
-            }
-
-            // Save Methods
-            async saveMenuItem() {
-                const formData = {
-                    name: document.getElementById('itemName').value,
-                    price: parseFloat(document.getElementById('itemPrice').value),
-                    category: parseInt(document.getElementById('itemCategory').value),
-                    description: document.getElementById('itemDescription').value,
-                    is_available: document.querySelector('.toggle-switch').classList.contains('active')
-                };
-
-                try {
-                    if (this.currentEditId) {
-                        await api.updateMenuItem(this.currentEditId, formData);
-                        showAlert('Menu item updated successfully!', 'success');
-                    } else {
-                        await api.createMenuItem(formData);
-                        showAlert('Menu item created successfully!', 'success');
-                    }
-
-                    await this.loadAllData();
-                    this.renderAllSections();
-                    this.updateOverviewStats();
-                    this.closeModal();
-
-                } catch (error) {
-                    console.error('Error saving menu item:', error);
-                    showAlert('Error saving menu item. Please try again.', 'error');
-                }
-            }
-
-            async saveCategory() {
-                const formData = {
-                    name: document.getElementById('categoryName').value,
-                    description: document.getElementById('categoryDescription').value
-                };
-
-                try {
-                    if (this.currentEditId) {
-                        await api.put(`/menu/categories/${this.currentEditId}/`, formData);
-                        showAlert('Category updated successfully!', 'success');
-                    } else {
-                        await api.post('/menu/categories/', formData);
-                        showAlert('Category created successfully!', 'success');
-                    }
-
-                    await this.loadAllData();
-                    this.renderAllSections();
-                    this.updateOverviewStats();
-                    this.closeModal();
-
-                } catch (error) {
-                    console.error('Error saving category:', error);
-                    showAlert('Error saving category. Please try again.', 'error');
-                }
-            }
-
-            async saveCustomization() {
-                const formData = {
-                    name: document.getElementById('customName').value,
-                    price: parseFloat(document.getElementById('customPrice').value),
-                    category: parseInt(document.getElementById('customCategory').value),
-                    description: document.getElementById('customDescription').value,
-                    is_available: document.querySelector('.toggle-switch').classList.contains('active')
-                };
-
-                try {
-                    if (this.currentEditId) {
-                        await api.put(`/menu/customizations/${this.currentEditId}/`, formData);
-                        showAlert('Customization updated successfully!', 'success');
-                    } else {
-                        await api.post('/menu/customizations/', formData);
-                        showAlert('Customization created successfully!', 'success');
-                    }
-
-                    await this.loadAllData();
-                    this.renderAllSections();
-                    this.updateOverviewStats();
-                    this.closeModal();
-
-                } catch (error) {
-                    console.error('Error saving customization:', error);
-                    showAlert('Error saving customization. Please try again.', 'error');
-                }
-            }
-
-            async saveInventoryItem() {
-                const formData = {
-                    name: document.getElementById('invItemName').value,
-                    unit: document.getElementById('invItemUnit').value,
-                    quantity: parseFloat(document.getElementById('invItemQuantity').value),
-                    threshold: parseFloat(document.getElementById('invItemThreshold').value),
-                    category: parseInt(document.getElementById('invItemCategory').value),
-                    supplier: document.getElementById('invItemSupplier').value || null
-                };
-
-                try {
-                    if (this.currentEditId) {
-                        await api.updateInventoryItem(this.currentEditId, formData);
-                        showAlert('Inventory item updated successfully!', 'success');
-                    } else {
-                        await api.createInventoryItem(formData);
-                        showAlert('Inventory item created successfully!', 'success');
-                    }
-
-                    await this.loadAllData();
-                    this.renderAllSections();
-                    this.updateOverviewStats();
-                    this.closeModal();
-
-                } catch (error) {
-                    console.error('Error saving inventory item:', error);
-                    showAlert('Error saving inventory item. Please try again.', 'error');
-                }
-            }
-
-            // Edit Methods
-            editMenuItem(id) {
-                const item = this.menuItems.find(i => i.id === id);
-                if (item) this.showMenuItemForm(item);
-            }
-
-            editCategory(id) {
-                const category = this.categories.find(c => c.id === id);
-                if (category) this.showCategoryForm(category);
-            }
-
-            editCustomization(id) {
-                const customization = this.customizations.find(c => c.id === id);
-                if (customization) this.showCustomizationForm(customization);
-            }
-
-            editInventoryItem(id) {
-                const item = this.inventoryItems.find(i => i.id === id);
-                if (item) this.showInventoryItemForm(item);
-            }
-
-            // Delete Methods
-            async deleteMenuItem(id) {
-                if (!confirm('Are you sure you want to delete this menu item?')) return;
-
-                try {
-                    await api.deleteMenuItem(id);
-                    showAlert('Menu item deleted successfully!', 'success');
-                    
-                    await this.loadAllData();
-                    this.renderAllSections();
-                    this.updateOverviewStats();
-
-                } catch (error) {
-                    console.error('Error deleting menu item:', error);
-                    showAlert('Error deleting menu item. Please try again.', 'error');
-                }
-            }
-
-            async deleteCategory(id) {
-                if (!confirm('Are you sure you want to delete this category?')) return;
-
-                try {
-                    await api.delete(`/menu/categories/${id}/`);
-                    showAlert('Category deleted successfully!', 'success');
-                    
-                    await this.loadAllData();
-                    this.renderAllSections();
-                    this.updateOverviewStats();
-
-                } catch (error) {
-                    console.error('Error deleting category:', error);
-                    showAlert('Error deleting category. Please try again.', 'error');
-                }
-            }
-
-            async deleteCustomization(id) {
-                if (!confirm('Are you sure you want to delete this customization?')) return;
-
-                try {
-                    await api.delete(`/menu/customizations/${id}/`);
-                    showAlert('Customization deleted successfully!', 'success');
-                    
-                    await this.loadAllData();
-                    this.renderAllSections();
-                    this.updateOverviewStats();
-
-                } catch (error) {
-                    console.error('Error deleting customization:', error);
-                    showAlert('Error deleting customization. Please try again.', 'error');
-                }
-            }
-
-            async deleteInventoryItem(id) {
-                if (!confirm('Are you sure you want to delete this inventory item?')) return;
-
-                try {
-                    await api.deleteInventoryItem(id);
-                    showAlert('Inventory item deleted successfully!', 'success');
-                    
-                    await this.loadAllData();
-                    this.renderAllSections();
-                    this.updateOverviewStats();
-
-                } catch (error) {
-                    console.error('Error deleting inventory item:', error);
-                    showAlert('Error deleting inventory item. Please try again.', 'error');
-                }
-            }
-
-            closeModal() {
-                document.getElementById('formModal').classList.add('hidden');
-                this.currentEditId = null;
-                this.currentEditType = null;
-            }
-        }
-
-        // Initialize admin manager when page loads
-        document.addEventListener('DOMContentLoaded', () => {
-            window.adminManager = new AdminManager();
-        });
-    </script>
-</body>
-</html>
Index: core/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/admin.py b/core/admin.py
deleted file mode 100644
--- a/core/admin.py	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,3 +0,0 @@
-from django.contrib import admin
-
-# Register your models here.
Index: frontend/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/index.html b/frontend/index.html
deleted file mode 100644
--- a/frontend/index.html	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,241 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Restaurant Management System - Dashboard</title>
-    <link rel="stylesheet" href="css/style.css">
-</head>
-<body>
-    <!-- Navigation -->
-    <nav class="navbar">
-        <div class="nav-container">
-            <a href="index.html" class="logo">RMS Dashboard</a>
-            <ul class="nav-links">
-                <li><a href="index.html" class="active">Dashboard</a></li>
-                <li><a href="tables.html">Tables</a></li>
-                <li><a href="menu.html">Menu</a></li>
-                <li><a href="orders.html">Orders</a></li>
-                <li><a href="inventory.html">Inventory</a></li>
-                <li><a href="admin.html">Admin</a></li>
-            </ul>
-        </div>
-    </nav>
-
-    <!-- Main Content -->
-    <div class="container">
-        <div class="page-header">
-            <h1 class="page-title">Restaurant Management Dashboard</h1>
-            <p class="page-subtitle">Welcome to your restaurant management system</p>
-        </div>
-
-        <!-- Quick Stats -->
-        <div class="row">
-            <div class="col-3">
-                <div class="card">
-                    <div class="card-header">
-                        <h3 class="card-title">Active Orders</h3>
-                    </div>
-                    <div class="text-center">
-                        <h2 id="activeOrdersCount">-</h2>
-                        <p>Orders in progress</p>
-                    </div>
-                </div>
-            </div>
-            <div class="col-3">
-                <div class="card">
-                    <div class="card-header">
-                        <h3 class="card-title">Available Tables</h3>
-                    </div>
-                    <div class="text-center">
-                        <h2 id="availableTablesCount">-</h2>
-                        <p>Tables ready for guests</p>
-                    </div>
-                </div>
-            </div>
-            <div class="col-3">
-                <div class="card">
-                    <div class="card-header">
-                        <h3 class="card-title">Menu Items</h3>
-                    </div>
-                    <div class="text-center">
-                        <h2 id="menuItemsCount">-</h2>
-                        <p>Available dishes</p>
-                    </div>
-                </div>
-            </div>
-            <div class="col-3">
-                <div class="card">
-                    <div class="card-header">
-                        <h3 class="card-title">Low Stock Items</h3>
-                    </div>
-                    <div class="text-center">
-                        <h2 id="lowStockCount">-</h2>
-                        <p>Items need restocking</p>
-                    </div>
-                </div>
-            </div>
-        </div>
-
-        <!-- Quick Actions -->
-        <div class="row">
-            <div class="col-6">
-                <div class="card">
-                    <div class="card-header">
-                        <h3 class="card-title">Quick Actions</h3>
-                    </div>
-                    <div class="row">
-                        <div class="col-6">
-                            <a href="tables.html" class="btn btn-primary" style="width: 100%; margin-bottom: 1rem;">
-                                View Tables
-                            </a>
-                        </div>
-                        <div class="col-6">
-                            <a href="menu.html" class="btn btn-success" style="width: 100%; margin-bottom: 1rem;">
-                                Browse Menu
-                            </a>
-                        </div>
-                        <div class="col-6">
-                            <a href="orders.html" class="btn btn-warning" style="width: 100%; margin-bottom: 1rem;">
-                                Manage Orders
-                            </a>
-                        </div>
-                        <div class="col-6">
-                            <a href="inventory.html" class="btn btn-secondary" style="width: 100%; margin-bottom: 1rem;">
-                                Check Inventory
-                            </a>
-                        </div>
-                    </div>
-                </div>
-            </div>
-            <div class="col-6">
-                <div class="card">
-                    <div class="card-header">
-                        <h3 class="card-title">Recent Orders</h3>
-                    </div>
-                    <div id="recentOrders">
-                        <div class="loading">Loading recent orders...</div>
-                    </div>
-                </div>
-            </div>
-        </div>
-
-        <!-- Low Stock Alert -->
-        <div class="row">
-            <div class="col">
-                <div class="card">
-                    <div class="card-header">
-                        <h3 class="card-title">Low Stock Alerts</h3>
-                    </div>
-                    <div id="lowStockAlerts">
-                        <div class="loading">Loading inventory status...</div>
-                    </div>
-                </div>
-            </div>
-        </div>
-    </div>
-
-    <script src="js/api.js"></script>
-    <script>
-        // Dashboard functionality
-        class Dashboard {
-            constructor() {
-                this.init();
-            }
-
-            async init() {
-                await this.loadDashboardData();
-            }
-
-            async loadDashboardData() {
-                try {
-                    // Load all dashboard data concurrently
-                    const [orders, menuItems, lowStockItems] = await Promise.all([
-                        api.getOrders().catch(() => ({ results: [] })),
-                        api.getMenuItems().catch(() => ({ results: [] })),
-                        api.getLowStockItems().catch(() => [])
-                    ]);
-
-                    this.updateStats(orders, menuItems, lowStockItems);
-                    this.displayRecentOrders(orders.results || []);
-                    this.displayLowStockAlerts(lowStockItems);
-
-                } catch (error) {
-                    console.error('Error loading dashboard data:', error);
-                    showAlert('Error loading dashboard data. Please check your connection.', 'error');
-                }
-            }
-
-            updateStats(orders, menuItems, lowStockItems) {
-                // Active orders (not completed)
-                const activeOrders = (orders.results || []).filter(order => order.status !== 'C');
-                document.getElementById('activeOrdersCount').textContent = activeOrders.length;
-
-                // Available tables (assuming 12 total tables)
-                const occupiedTables = new Set((orders.results || [])
-                    .filter(order => order.status !== 'C' && order.table_number)
-                    .map(order => order.table_number));
-                const availableTables = 12 - occupiedTables.size;
-                document.getElementById('availableTablesCount').textContent = availableTables;
-
-                // Menu items
-                const availableMenuItems = (menuItems.results || []).filter(item => item.is_available);
-                document.getElementById('menuItemsCount').textContent = availableMenuItems.length;
-
-                // Low stock items
-                document.getElementById('lowStockCount').textContent = lowStockItems.length;
-            }
-
-            displayRecentOrders(orders) {
-                const container = document.getElementById('recentOrders');
-                
-                if (orders.length === 0) {
-                    container.innerHTML = '<p class="text-center">No recent orders</p>';
-                    return;
-                }
-
-                const recentOrders = orders.slice(0, 5); // Show last 5 orders
-                const html = recentOrders.map(order => `
-                    <div style="padding: 0.5rem 0; border-bottom: 1px solid #ecf0f1;">
-                        <div style="display: flex; justify-content: space-between; align-items: center;">
-                            <div>
-                                <strong>Order #${order.id}</strong>
-                                ${order.table_number ? `- Table ${order.table_number}` : ''}
-                            </div>
-                            <div>
-                                ${getStatusBadge(order.status)}
-                            </div>
-                        </div>
-                        <small style="color: #7f8c8d;">${formatDateTime(order.created_at)}</small>
-                    </div>
-                `).join('');
-
-                container.innerHTML = html;
-            }
-
-            displayLowStockAlerts(lowStockItems) {
-                const container = document.getElementById('lowStockAlerts');
-                
-                if (lowStockItems.length === 0) {
-                    container.innerHTML = '<p class="text-center">All items are well stocked!</p>';
-                    return;
-                }
-
-                const html = lowStockItems.map(item => `
-                    <div class="alert alert-warning" style="margin-bottom: 0.5rem;">
-                        <strong>${item.name}</strong> - Only ${item.quantity} ${item.unit} remaining 
-                        (Threshold: ${item.threshold} ${item.unit})
-                    </div>
-                `).join('');
-
-                container.innerHTML = html;
-            }
-        }
-
-        // Initialize dashboard when page loads
-        document.addEventListener('DOMContentLoaded', () => {
-            new Dashboard();
-        });
-    </script>
-</body>
-</html>
Index: core/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/models.py b/core/models.py
deleted file mode 100644
--- a/core/models.py	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,3 +0,0 @@
-from django.db import models
-
-# Create your models here.
Index: frontend/css/style.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/css/style.css b/frontend/css/style.css
deleted file mode 100644
--- a/frontend/css/style.css	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,375 +0,0 @@
-/* Reset and Base Styles */
-* {
-    margin: 0;
-    padding: 0;
-    box-sizing: border-box;
-}
-
-body {
-    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
-    background-color: #f5f5f5;
-    color: #333;
-    line-height: 1.6;
-}
-
-/* Navigation Styles */
-.navbar {
-    background-color: #2c3e50;
-    padding: 1rem 0;
-    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
-}
-
-.nav-container {
-    max-width: 1200px;
-    margin: 0 auto;
-    display: flex;
-    justify-content: space-between;
-    align-items: center;
-    padding: 0 2rem;
-}
-
-.logo {
-    color: white;
-    font-size: 1.5rem;
-    font-weight: bold;
-    text-decoration: none;
-}
-
-.nav-links {
-    display: flex;
-    list-style: none;
-    gap: 2rem;
-}
-
-.nav-links a {
-    color: white;
-    text-decoration: none;
-    padding: 0.5rem 1rem;
-    border-radius: 4px;
-    transition: background-color 0.3s;
-}
-
-.nav-links a:hover,
-.nav-links a.active {
-    background-color: #34495e;
-}
-
-/* Container and Layout */
-.container {
-    max-width: 1200px;
-    margin: 2rem auto;
-    padding: 0 2rem;
-}
-
-.page-header {
-    text-align: center;
-    margin-bottom: 2rem;
-}
-
-.page-title {
-    font-size: 2.5rem;
-    color: #2c3e50;
-    margin-bottom: 0.5rem;
-}
-
-.page-subtitle {
-    color: #7f8c8d;
-    font-size: 1.1rem;
-}
-
-/* Card Styles */
-.card {
-    background: white;
-    border-radius: 8px;
-    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
-    padding: 1.5rem;
-    margin-bottom: 1.5rem;
-}
-
-.card-header {
-    border-bottom: 1px solid #ecf0f1;
-    padding-bottom: 1rem;
-    margin-bottom: 1rem;
-}
-
-.card-title {
-    font-size: 1.3rem;
-    color: #2c3e50;
-    margin-bottom: 0.5rem;
-}
-
-/* Button Styles */
-.btn {
-    padding: 0.75rem 1.5rem;
-    border: none;
-    border-radius: 4px;
-    cursor: pointer;
-    font-size: 1rem;
-    text-decoration: none;
-    display: inline-block;
-    text-align: center;
-    transition: all 0.3s;
-}
-
-.btn-primary {
-    background-color: #3498db;
-    color: white;
-}
-
-.btn-primary:hover {
-    background-color: #2980b9;
-}
-
-.btn-success {
-    background-color: #27ae60;
-    color: white;
-}
-
-.btn-success:hover {
-    background-color: #229954;
-}
-
-.btn-warning {
-    background-color: #f39c12;
-    color: white;
-}
-
-.btn-warning:hover {
-    background-color: #e67e22;
-}
-
-.btn-danger {
-    background-color: #e74c3c;
-    color: white;
-}
-
-.btn-danger:hover {
-    background-color: #c0392b;
-}
-
-.btn-secondary {
-    background-color: #95a5a6;
-    color: white;
-}
-
-.btn-secondary:hover {
-    background-color: #7f8c8d;
-}
-
-/* Table Styles */
-.table {
-    width: 100%;
-    border-collapse: collapse;
-    margin-top: 1rem;
-}
-
-.table th,
-.table td {
-    padding: 0.75rem;
-    text-align: left;
-    border-bottom: 1px solid #ecf0f1;
-}
-
-.table th {
-    background-color: #f8f9fa;
-    font-weight: 600;
-    color: #2c3e50;
-}
-
-.table tbody tr:hover {
-    background-color: #f8f9fa;
-}
-
-/* Form Styles */
-.form-group {
-    margin-bottom: 1rem;
-}
-
-.form-label {
-    display: block;
-    margin-bottom: 0.5rem;
-    font-weight: 500;
-    color: #2c3e50;
-}
-
-.form-control {
-    width: 100%;
-    padding: 0.75rem;
-    border: 1px solid #ddd;
-    border-radius: 4px;
-    font-size: 1rem;
-}
-
-.form-control:focus {
-    outline: none;
-    border-color: #3498db;
-    box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
-}
-
-/* Grid System */
-.row {
-    display: flex;
-    flex-wrap: wrap;
-    margin: -0.75rem;
-}
-
-.col {
-    flex: 1;
-    padding: 0.75rem;
-}
-
-.col-2 {
-    flex: 0 0 16.666667%;
-    padding: 0.75rem;
-}
-
-.col-3 {
-    flex: 0 0 25%;
-    padding: 0.75rem;
-}
-
-.col-4 {
-    flex: 0 0 33.333333%;
-    padding: 0.75rem;
-}
-
-.col-6 {
-    flex: 0 0 50%;
-    padding: 0.75rem;
-}
-
-.col-8 {
-    flex: 0 0 66.666667%;
-    padding: 0.75rem;
-}
-
-/* Status Badges */
-.badge {
-    padding: 0.25rem 0.75rem;
-    border-radius: 12px;
-    font-size: 0.875rem;
-    font-weight: 500;
-}
-
-.badge-success {
-    background-color: #d4edda;
-    color: #155724;
-}
-
-.badge-warning {
-    background-color: #fff3cd;
-    color: #856404;
-}
-
-.badge-danger {
-    background-color: #f8d7da;
-    color: #721c24;
-}
-
-.badge-info {
-    background-color: #d1ecf1;
-    color: #0c5460;
-}
-
-/* Loading and Alert Styles */
-.loading {
-    text-align: center;
-    padding: 2rem;
-    color: #7f8c8d;
-}
-
-.alert {
-    padding: 1rem;
-    border-radius: 4px;
-    margin-bottom: 1rem;
-}
-
-.alert-success {
-    background-color: #d4edda;
-    color: #155724;
-    border: 1px solid #c3e6cb;
-}
-
-.alert-error {
-    background-color: #f8d7da;
-    color: #721c24;
-    border: 1px solid #f5c6cb;
-}
-
-.alert-warning {
-    background-color: #fff3cd;
-    color: #856404;
-    border: 1px solid #ffeaa7;
-}
-
-/* Utility Classes */
-.text-center {
-    text-align: center;
-}
-
-.text-right {
-    text-align: right;
-}
-
-.mb-1 {
-    margin-bottom: 0.5rem;
-}
-
-.mb-2 {
-    margin-bottom: 1rem;
-}
-
-.mb-3 {
-    margin-bottom: 1.5rem;
-}
-
-.mt-1 {
-    margin-top: 0.5rem;
-}
-
-.mt-2 {
-    margin-top: 1rem;
-}
-
-.mt-3 {
-    margin-top: 1.5rem;
-}
-
-.hidden {
-    display: none;
-}
-
-/* Responsive Design */
-@media (max-width: 768px) {
-    .nav-container {
-        flex-direction: column;
-        gap: 1rem;
-    }
-    
-    .nav-links {
-        flex-direction: column;
-        gap: 0.5rem;
-        text-align: center;
-    }
-    
-    .container {
-        padding: 0 1rem;
-    }
-    
-    .row {
-        flex-direction: column;
-    }
-    
-    .col,
-    .col-2,
-    .col-3,
-    .col-4,
-    .col-6,
-    .col-8 {
-        flex: 1;
-    }
-    
-    .page-title {
-        font-size: 2rem;
-    }
-}
Index: frontend/tables.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/tables.html b/frontend/tables.html
deleted file mode 100644
--- a/frontend/tables.html	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,555 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Restaurant Management System - Tables</title>
-    <link rel="stylesheet" href="css/style.css">
-    <style>
-        /* Table Layout Specific Styles */
-        .table-layout {
-            background: white;
-            border-radius: 8px;
-            padding: 2rem;
-            margin-bottom: 2rem;
-            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
-            position: relative;
-            min-height: 500px;
-        }
-
-        .table-item {
-            position: absolute;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            border: 2px solid #333;
-            background: white;
-            font-weight: bold;
-            font-size: 1.1rem;
-        }
-
-        .table-item:hover {
-            transform: scale(1.05);
-            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
-        }
-
-        .table-item.available {
-            border-color: #27ae60;
-            color: #27ae60;
-        }
-
-        .table-item.occupied {
-            border-color: #e74c3c;
-            color: #e74c3c;
-            background-color: #ffebee;
-        }
-
-        .table-item.selected {
-            border-color: #3498db;
-            background-color: #e3f2fd;
-            color: #3498db;
-        }
-
-        /* Table shapes and positions */
-        .table-square {
-            width: 80px;
-            height: 80px;
-            border-radius: 8px;
-        }
-
-        .table-round {
-            width: 60px;
-            height: 60px;
-            border-radius: 50%;
-        }
-
-        .chair {
-            position: absolute;
-            width: 30px;
-            height: 30px;
-            border: 2px solid #333;
-            border-radius: 50%;
-            background: white;
-        }
-
-        .chair.occupied {
-            background-color: #e74c3c;
-            border-color: #e74c3c;
-        }
-
-        .chair.available {
-            background-color: #27ae60;
-            border-color: #27ae60;
-        }
-
-        /* Window and entrance labels */
-        .window-label {
-            position: absolute;
-            top: 10px;
-            right: 50%;
-            transform: translateX(50%);
-            color: #bdc3c7;
-            font-style: italic;
-        }
-
-        .entrance-label {
-            position: absolute;
-            bottom: 10px;
-            right: 10px;
-            color: #bdc3c7;
-            font-style: italic;
-        }
-
-        .counter {
-            position: absolute;
-            bottom: 50px;
-            right: 50px;
-            width: 100px;
-            height: 60px;
-            border: 2px solid #333;
-            border-radius: 8px;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-            background: #f8f9fa;
-            font-weight: bold;
-        }
-
-        /* Order panel */
-        .order-panel {
-            background: white;
-            border-radius: 8px;
-            padding: 1.5rem;
-            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
-        }
-
-        .order-summary {
-            border-top: 1px solid #ecf0f1;
-            padding-top: 1rem;
-            margin-top: 1rem;
-        }
-
-        .order-item {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            padding: 0.5rem 0;
-            border-bottom: 1px solid #ecf0f1;
-        }
-
-        .order-item:last-child {
-            border-bottom: none;
-        }
-
-        .quantity-controls {
-            display: flex;
-            align-items: center;
-            gap: 0.5rem;
-        }
-
-        .quantity-btn {
-            width: 30px;
-            height: 30px;
-            border: 1px solid #ddd;
-            background: white;
-            border-radius: 4px;
-            cursor: pointer;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-        }
-
-        .quantity-btn:hover {
-            background: #f8f9fa;
-        }
-    </style>
-</head>
-<body>
-    <!-- Navigation -->
-    <nav class="navbar">
-        <div class="nav-container">
-            <a href="index.html" class="logo">RMS Dashboard</a>
-            <ul class="nav-links">
-                <li><a href="index.html">Dashboard</a></li>
-                <li><a href="tables.html" class="active">Tables</a></li>
-                <li><a href="menu.html">Menu</a></li>
-                <li><a href="orders.html">Orders</a></li>
-                <li><a href="inventory.html">Inventory</a></li>
-                <li><a href="admin.html">Admin</a></li>
-            </ul>
-        </div>
-    </nav>
-
-    <!-- Main Content -->
-    <div class="container">
-        <div class="page-header">
-            <h1 class="page-title">Table Management</h1>
-            <p class="page-subtitle">Select a table to create or manage orders</p>
-        </div>
-
-        <div class="row">
-            <!-- Table Layout -->
-            <div class="col-8">
-                <div class="table-layout" id="tableLayout">
-                    <div class="window-label">Window</div>
-                    <div class="entrance-label">Entrance/Exit</div>
-                    
-                    <!-- Tables will be positioned here -->
-                    <div class="counter">Counter</div>
-                </div>
-            </div>
-
-            <!-- Order Panel -->
-            <div class="col-4">
-                <div class="order-panel">
-                    <h3>Table Order</h3>
-                    <div id="selectedTableInfo">
-                        <p class="text-center" style="color: #7f8c8d; margin: 2rem 0;">
-                            Select a table to start an order
-                        </p>
-                    </div>
-                    
-                    <div id="orderForm" class="hidden">
-                        <div class="form-group">
-                            <label class="form-label">Selected Table:</label>
-                            <div id="selectedTableDisplay" class="form-control" style="background: #f8f9fa;"></div>
-                        </div>
-                        
-                        <div class="form-group">
-                            <label class="form-label">Order Notes:</label>
-                            <textarea id="orderNotes" class="form-control" rows="3" placeholder="Special requests or notes..."></textarea>
-                        </div>
-                        
-                        <div class="form-group">
-                            <button type="button" class="btn btn-primary" onclick="tableManager.showMenuSelection()">
-                                Add Items to Order
-                            </button>
-                        </div>
-                        
-                        <div id="orderItems" class="hidden">
-                            <h4>Order Items</h4>
-                            <div id="orderItemsList"></div>
-                            <div class="order-summary">
-                                <div style="display: flex; justify-content: space-between; font-weight: bold;">
-                                    <span>Total:</span>
-                                    <span id="orderTotal">$0.00</span>
-                                </div>
-                                <button type="button" class="btn btn-success mt-2" style="width: 100%;" onclick="tableManager.submitOrder()">
-                                    Submit Order
-                                </button>
-                            </div>
-                        </div>
-                    </div>
-                </div>
-            </div>
-        </div>
-
-        <!-- Menu Selection Modal -->
-        <div id="menuModal" class="hidden" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
-            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; padding: 2rem; max-width: 600px; width: 90%; max-height: 80%; overflow-y: auto;">
-                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
-                    <h3>Select Menu Items</h3>
-                    <button type="button" onclick="tableManager.closeMenuModal()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer;">&times;</button>
-                </div>
-                <div id="menuItemsList">
-                    <div class="loading">Loading menu items...</div>
-                </div>
-            </div>
-        </div>
-    </div>
-
-    <script src="js/api.js"></script>
-    <script>
-        class TableManager {
-            constructor() {
-                this.selectedTable = null;
-                this.currentOrder = {
-                    items: [],
-                    total: 0
-                };
-                this.tables = [];
-                this.menuItems = [];
-                this.init();
-            }
-
-            async init() {
-                this.createTableLayout();
-                await this.loadMenuItems();
-                await this.loadTableStatuses();
-            }
-
-            createTableLayout() {
-                const layout = document.getElementById('tableLayout');
-                
-                // Table positions based on the screenshot
-                const tablePositions = [
-                    // Left side tables
-                    { id: 8, x: 50, y: 180, type: 'square', chairs: [{ x: 20, y: 205 }, { x: 50, y: 150 }] },
-                    { id: 9, x: 50, y: 280, type: 'round', chairs: [{ x: 20, y: 305 }] },
-                    { id: 10, x: 50, y: 380, type: 'round', chairs: [{ x: 20, y: 405 }] },
-                    { id: 11, x: 50, y: 480, type: 'square', chairs: [{ x: 20, y: 505 }] },
-                    { id: 12, x: 50, y: 580, type: 'round', chairs: [{ x: 20, y: 605 }] },
-                    
-                    // Center tables
-                    { id: 7, x: 200, y: 180, type: 'square', chairs: [{ x: 170, y: 205 }, { x: 230, y: 205 }] },
-                    { id: 2, x: 200, y: 380, type: 'square', chairs: [{ x: 170, y: 355 }, { x: 170, y: 405 }, { x: 230, y: 355 }, { x: 230, y: 405 }] },
-                    
-                    // Right center tables
-                    { id: 6, x: 350, y: 180, type: 'square', chairs: [{ x: 320, y: 205 }, { x: 380, y: 205 }] },
-                    { id: 3, x: 350, y: 380, type: 'square', chairs: [{ x: 320, y: 355 }, { x: 320, y: 405 }] },
-                    { id: 1, x: 500, y: 380, type: 'square', chairs: [{ x: 470, y: 355 }, { x: 470, y: 405 }, { x: 530, y: 355 }, { x: 530, y: 405 }] },
-                    
-                    // Right side tables
-                    { id: 5, x: 650, y: 180, type: 'square', chairs: [{ x: 620, y: 205 }, { x: 680, y: 205 }] },
-                    { id: 4, x: 650, y: 280, type: 'square', chairs: [{ x: 680, y: 305 }] }
-                ];
-
-                tablePositions.forEach(tableData => {
-                    // Create table element
-                    const table = document.createElement('div');
-                    table.className = `table-item table-${tableData.type} available`;
-                    table.style.left = `${tableData.x}px`;
-                    table.style.top = `${tableData.y}px`;
-                    table.textContent = tableData.id;
-                    table.dataset.tableId = tableData.id;
-                    table.onclick = () => this.selectTable(tableData.id);
-                    
-                    layout.appendChild(table);
-
-                    // Create chairs
-                    tableData.chairs.forEach(chair => {
-                        const chairElement = document.createElement('div');
-                        chairElement.className = 'chair available';
-                        chairElement.style.left = `${chair.x}px`;
-                        chairElement.style.top = `${chair.y}px`;
-                        layout.appendChild(chairElement);
-                    });
-
-                    // Store table data
-                    this.tables.push({
-                        id: tableData.id,
-                        status: 'A', // Available
-                        element: table
-                    });
-                });
-            }
-
-            async loadTableStatuses() {
-                try {
-                    const orders = await api.getOrders();
-                    const activeOrders = (orders.results || []).filter(order => order.status !== 'C');
-                    
-                    // Update table statuses based on active orders
-                    activeOrders.forEach(order => {
-                        if (order.table_number) {
-                            this.updateTableStatus(order.table_number, 'O'); // Occupied
-                        }
-                    });
-                } catch (error) {
-                    console.error('Error loading table statuses:', error);
-                }
-            }
-
-            updateTableStatus(tableId, status) {
-                const table = this.tables.find(t => t.id == tableId);
-                if (table) {
-                    table.status = status;
-                    table.element.className = table.element.className.replace(/available|occupied/, 
-                        status === 'A' ? 'available' : 'occupied');
-                }
-            }
-
-            selectTable(tableId) {
-                // Remove previous selection
-                document.querySelectorAll('.table-item').forEach(table => {
-                    table.classList.remove('selected');
-                });
-
-                // Select new table
-                const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
-                tableElement.classList.add('selected');
-                
-                this.selectedTable = tableId;
-                this.showOrderForm();
-            }
-
-            showOrderForm() {
-                const infoDiv = document.getElementById('selectedTableInfo');
-                const formDiv = document.getElementById('orderForm');
-                const tableDisplay = document.getElementById('selectedTableDisplay');
-                
-                infoDiv.classList.add('hidden');
-                formDiv.classList.remove('hidden');
-                tableDisplay.textContent = `Table ${this.selectedTable}`;
-            }
-
-            async loadMenuItems() {
-                try {
-                    const response = await api.getMenuItems();
-                    this.menuItems = response.results || [];
-                } catch (error) {
-                    console.error('Error loading menu items:', error);
-                    this.menuItems = [];
-                }
-            }
-
-            showMenuSelection() {
-                const modal = document.getElementById('menuModal');
-                const itemsList = document.getElementById('menuItemsList');
-                
-                if (this.menuItems.length === 0) {
-                    itemsList.innerHTML = '<p class="text-center">No menu items available</p>';
-                } else {
-                    const html = this.menuItems.map(item => `
-                        <div class="card mb-2">
-                            <div style="display: flex; justify-content: space-between; align-items: center;">
-                                <div>
-                                    <h4>${item.name}</h4>
-                                    <p style="color: #7f8c8d; margin: 0;">${item.description || ''}</p>
-                                    <strong>${formatCurrency(item.price)}</strong>
-                                </div>
-                                <button type="button" class="btn btn-primary" onclick="tableManager.addItemToOrder(${item.id})">
-                                    Add to Order
-                                </button>
-                            </div>
-                        </div>
-                    `).join('');
-                    itemsList.innerHTML = html;
-                }
-                
-                modal.classList.remove('hidden');
-            }
-
-            closeMenuModal() {
-                document.getElementById('menuModal').classList.add('hidden');
-            }
-
-            addItemToOrder(itemId) {
-                const menuItem = this.menuItems.find(item => item.id === itemId);
-                if (!menuItem) return;
-
-                const existingItem = this.currentOrder.items.find(item => item.id === itemId);
-                
-                if (existingItem) {
-                    existingItem.quantity += 1;
-                } else {
-                    this.currentOrder.items.push({
-                        id: itemId,
-                        name: menuItem.name,
-                        price: parseFloat(menuItem.price),
-                        quantity: 1
-                    });
-                }
-
-                this.updateOrderDisplay();
-                this.closeMenuModal();
-            }
-
-            updateOrderDisplay() {
-                const orderItemsDiv = document.getElementById('orderItems');
-                const orderItemsList = document.getElementById('orderItemsList');
-                const orderTotal = document.getElementById('orderTotal');
-
-                if (this.currentOrder.items.length === 0) {
-                    orderItemsDiv.classList.add('hidden');
-                    return;
-                }
-
-                orderItemsDiv.classList.remove('hidden');
-
-                const html = this.currentOrder.items.map(item => `
-                    <div class="order-item">
-                        <div>
-                            <strong>${item.name}</strong><br>
-                            <small>${formatCurrency(item.price)} each</small>
-                        </div>
-                        <div class="quantity-controls">
-                            <button type="button" class="quantity-btn" onclick="tableManager.updateItemQuantity(${item.id}, -1)">-</button>
-                            <span style="margin: 0 0.5rem;">${item.quantity}</span>
-                            <button type="button" class="quantity-btn" onclick="tableManager.updateItemQuantity(${item.id}, 1)">+</button>
-                            <button type="button" class="btn btn-danger" style="margin-left: 0.5rem; padding: 0.25rem 0.5rem;" onclick="tableManager.removeItemFromOrder(${item.id})">Remove</button>
-                        </div>
-                    </div>
-                `).join('');
-
-                orderItemsList.innerHTML = html;
-
-                // Calculate total
-                const total = this.currentOrder.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
-                orderTotal.textContent = formatCurrency(total);
-            }
-
-            updateItemQuantity(itemId, change) {
-                const item = this.currentOrder.items.find(item => item.id === itemId);
-                if (item) {
-                    item.quantity += change;
-                    if (item.quantity <= 0) {
-                        this.removeItemFromOrder(itemId);
-                    } else {
-                        this.updateOrderDisplay();
-                    }
-                }
-            }
-
-            removeItemFromOrder(itemId) {
-                this.currentOrder.items = this.currentOrder.items.filter(item => item.id !== itemId);
-                this.updateOrderDisplay();
-            }
-
-            async submitOrder() {
-                if (!this.selectedTable || this.currentOrder.items.length === 0) {
-                    showAlert('Please select a table and add items to the order', 'warning');
-                    return;
-                }
-
-                try {
-                    const orderData = {
-                        table_number: this.selectedTable,
-                        notes: document.getElementById('orderNotes').value,
-                        status: 'R', // Received
-                        items: this.currentOrder.items.map(item => ({
-                            menu_item: item.id,
-                            quantity: item.quantity
-                        }))
-                    };
-
-                    await api.createOrder(orderData);
-                    
-                    showAlert('Order submitted successfully!', 'success');
-                    
-                    // Update table status
-                    this.updateTableStatus(this.selectedTable, 'O');
-                    
-                    // Reset form
-                    this.resetOrderForm();
-                    
-                } catch (error) {
-                    console.error('Error submitting order:', error);
-                    showAlert('Error submitting order. Please try again.', 'error');
-                }
-            }
-
-            resetOrderForm() {
-                this.selectedTable = null;
-                this.currentOrder = { items: [], total: 0 };
-                
-                document.querySelectorAll('.table-item').forEach(table => {
-                    table.classList.remove('selected');
-                });
-                
-                document.getElementById('selectedTableInfo').classList.remove('hidden');
-                document.getElementById('orderForm').classList.add('hidden');
-                document.getElementById('orderNotes').value = '';
-                this.updateOrderDisplay();
-            }
-        }
-
-        // Initialize table manager when page loads
-        document.addEventListener('DOMContentLoaded', () => {
-            window.tableManager = new TableManager();
-        });
-    </script>
-</body>
-</html>
Index: center/templates/center/dashboard.html
===================================================================
diff --git a/center/templates/center/dashboard.html b/center/templates/center/dashboard.html
deleted file mode 100644
--- a/center/templates/center/dashboard.html	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,115 +0,0 @@
-{% extends 'base.html' %}
-{% block title %}Dashboard{% endblock %}
-{% block content %}
-
-<div class="container mt-5">
-  <h1 class="mb-4">Restaurant Dashboard</h1>
-
-  <!-- Date Filter -->
-  <form method="get" class="mb-4">
-    <div class="form-group row">
-      <label for="date" class="col-sm-2 col-form-label">Select Date:</label>
-      <div class="col-sm-4">
-        <input type="date" id="date" name="date" class="form-control"
-               value="{{ selected_date|date:'Y-m-d' }}" onchange="this.form.submit()">
-      </div>
-    </div>
-  </form>
-
-  <!-- Sales Summary -->
-  <div class="card mb-4">
-    <div class="card-header"><strong>Sales Summary for {{ selected_date|date:"M d, Y" }}</strong></div>
-    <div class="card-body">
-      <p>Total Sales: ${{ total_sales|floatformat:2 }}</p>
-      <p>Total Orders: {{ total_orders }}</p>
-      <p>Average Order Value: ${{ avg_order_value|floatformat:2 }}</p>
-    </div>
-  </div>
-
-  <!-- Top-Selling Items -->
-  <div class="card mb-4">
-    <div class="card-header"><strong>Top Selling Items</strong></div>
-    <div class="card-body">
-      <table class="table table-bordered table-sm">
-        <thead>
-          <tr>
-            <th>Menu Item</th>
-            <th>Quantity Sold</th>
-            <th>Total Revenue</th>
-          </tr>
-        </thead>
-        <tbody>
-          {% for item in top_items %}
-            <tr>
-              <td>{{ item.menu_item__name }}</td>
-              <td>{{ item.quantity_sold }}</td>
-              <td>${{ item.total_revenue|floatformat:2 }}</td>
-            </tr>
-          {% empty %}
-            <tr><td colspan="3">No items sold.</td></tr>
-          {% endfor %}
-        </tbody>
-      </table>
-    </div>
-  </div>
-
-  <!-- Table Usage -->
-  <div class="card mb-4">
-    <div class="card-header"><strong>Table Usage</strong></div>
-    <div class="card-body">
-      <table class="table table-bordered table-sm">
-        <thead>
-          <tr>
-            <th>Table</th>
-            <th>Status</th>
-            <th>Orders</th>
-            <th>Sales</th>
-          </tr>
-        </thead>
-        <tbody>
-          {% for table in table_data %}
-            <tr>
-              <td>{{ table.table_number }}</td>
-              <td>{{ table.status }}</td>
-              <td>{{ table.order_count }}</td>
-              <td>${{ table.total_sales|floatformat:2 }}</td>
-            </tr>
-          {% endfor %}
-        </tbody>
-      </table>
-    </div>
-  </div>
-
-  <!-- Low Stock Ingredients -->
-  <div class="card mb-4">
-    <div class="card-header text-danger"><strong>Low Stock Ingredients</strong></div>
-    <div class="card-body">
-      {% if low_stock_ingredients %}
-        <table class="table table-bordered table-sm">
-          <thead>
-            <tr>
-              <th>Ingredient</th>
-              <th>Current Stock</th>
-              <th>Threshold</th>
-              <th>Unit</th>
-            </tr>
-          </thead>
-          <tbody>
-            {% for ing in low_stock_ingredients %}
-              <tr>
-                <td>{{ ing.name }}</td>
-                <td>{{ ing.stock }}</td>
-                <td>{{ ing.threshold }}</td>
-                <td>{{ ing.unit }}</td>
-              </tr>
-            {% endfor %}
-          </tbody>
-        </table>
-      {% else %}
-        <p>All ingredients are above threshold.</p>
-      {% endif %}
-    </div>
-  </div>
-</div>
-
-{% endblock %}
Index: frontend/js/api.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/js/api.js b/frontend/js/api.js
deleted file mode 100644
--- a/frontend/js/api.js	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,289 +0,0 @@
-// API Configuration
-const API_BASE_URL = 'http://localhost:8000';
-const API_ENDPOINTS = {
-    // Menu endpoints
-    categories: '/menu/categories/',
-    menuItems: '/menu/menu-items/',
-    customizations: '/menu/customizations/',
-    
-    // Order endpoints
-    orders: '/order/orders/',
-    
-    // Inventory endpoints
-    inventoryCategories: '/inventory/categories/',
-    inventoryItems: '/inventory/inventory-items/',
-    lowStockItems: '/inventory/inventory-items/low-stock/',
-    
-    // Auth endpoint
-    auth: '/api-token-auth/'
-};
-
-// API utility class
-class API {
-    constructor() {
-        this.token = localStorage.getItem('authToken');
-    }
-
-    // Get authorization headers
-    getHeaders() {
-        const headers = {
-            'Content-Type': 'application/json',
-        };
-        
-        if (this.token) {
-            headers['Authorization'] = `Token ${this.token}`;
-        }
-        
-        return headers;
-    }
-
-    // Handle API responses
-    async handleResponse(response) {
-        if (!response.ok) {
-            const errorData = await response.json().catch(() => ({}));
-            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
-        }
-        return await response.json();
-    }
-
-    // Generic GET request
-    async get(endpoint) {
-        try {
-            const response = await fetch(`${API_BASE_URL}${endpoint}`, {
-                method: 'GET',
-                headers: this.getHeaders(),
-            });
-            return await this.handleResponse(response);
-        } catch (error) {
-            console.error('GET request failed:', error);
-            throw error;
-        }
-    }
-
-    // Generic POST request
-    async post(endpoint, data) {
-        try {
-            const response = await fetch(`${API_BASE_URL}${endpoint}`, {
-                method: 'POST',
-                headers: this.getHeaders(),
-                body: JSON.stringify(data),
-            });
-            return await this.handleResponse(response);
-        } catch (error) {
-            console.error('POST request failed:', error);
-            throw error;
-        }
-    }
-
-    // Generic PUT request
-    async put(endpoint, data) {
-        try {
-            const response = await fetch(`${API_BASE_URL}${endpoint}`, {
-                method: 'PUT',
-                headers: this.getHeaders(),
-                body: JSON.stringify(data),
-            });
-            return await this.handleResponse(response);
-        } catch (error) {
-            console.error('PUT request failed:', error);
-            throw error;
-        }
-    }
-
-    // Generic PATCH request
-    async patch(endpoint, data) {
-        try {
-            const response = await fetch(`${API_BASE_URL}${endpoint}`, {
-                method: 'PATCH',
-                headers: this.getHeaders(),
-                body: JSON.stringify(data),
-            });
-            return await this.handleResponse(response);
-        } catch (error) {
-            console.error('PATCH request failed:', error);
-            throw error;
-        }
-    }
-
-    // Generic DELETE request
-    async delete(endpoint) {
-        try {
-            const response = await fetch(`${API_BASE_URL}${endpoint}`, {
-                method: 'DELETE',
-                headers: this.getHeaders(),
-            });
-            
-            if (response.status === 204) {
-                return { success: true };
-            }
-            
-            return await this.handleResponse(response);
-        } catch (error) {
-            console.error('DELETE request failed:', error);
-            throw error;
-        }
-    }
-
-    // Authentication
-    async login(username, password) {
-        try {
-            const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.auth}`, {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                },
-                body: JSON.stringify({ username, password }),
-            });
-            
-            const data = await this.handleResponse(response);
-            this.token = data.token;
-            localStorage.setItem('authToken', this.token);
-            return data;
-        } catch (error) {
-            console.error('Login failed:', error);
-            throw error;
-        }
-    }
-
-    // Logout
-    logout() {
-        this.token = null;
-        localStorage.removeItem('authToken');
-    }
-
-    // Check if user is authenticated
-    isAuthenticated() {
-        return !!this.token;
-    }
-
-    // Menu API methods
-    async getCategories() {
-        return await this.get(API_ENDPOINTS.categories);
-    }
-
-    async getMenuItems() {
-        return await this.get(API_ENDPOINTS.menuItems);
-    }
-
-    async getMenuItem(id) {
-        return await this.get(`${API_ENDPOINTS.menuItems}${id}/`);
-    }
-
-    async createMenuItem(data) {
-        return await this.post(API_ENDPOINTS.menuItems, data);
-    }
-
-    async updateMenuItem(id, data) {
-        return await this.put(`${API_ENDPOINTS.menuItems}${id}/`, data);
-    }
-
-    async deleteMenuItem(id) {
-        return await this.delete(`${API_ENDPOINTS.menuItems}${id}/`);
-    }
-
-    async getCustomizations() {
-        return await this.get(API_ENDPOINTS.customizations);
-    }
-
-    // Order API methods
-    async getOrders() {
-        return await this.get(API_ENDPOINTS.orders);
-    }
-
-    async getOrder(id) {
-        return await this.get(`${API_ENDPOINTS.orders}${id}/`);
-    }
-
-    async createOrder(data) {
-        return await this.post(API_ENDPOINTS.orders, data);
-    }
-
-    async updateOrder(id, data) {
-        return await this.put(`${API_ENDPOINTS.orders}${id}/`, data);
-    }
-
-    async updateOrderStatus(id, status) {
-        return await this.patch(`${API_ENDPOINTS.orders}${id}/`, { status });
-    }
-
-    async deleteOrder(id) {
-        return await this.delete(`${API_ENDPOINTS.orders}${id}/`);
-    }
-
-    // Inventory API methods
-    async getInventoryCategories() {
-        return await this.get(API_ENDPOINTS.inventoryCategories);
-    }
-
-    async getInventoryItems() {
-        return await this.get(API_ENDPOINTS.inventoryItems);
-    }
-
-    async getInventoryItem(id) {
-        return await this.get(`${API_ENDPOINTS.inventoryItems}${id}/`);
-    }
-
-    async createInventoryItem(data) {
-        return await this.post(API_ENDPOINTS.inventoryItems, data);
-    }
-
-    async updateInventoryItem(id, data) {
-        return await this.put(`${API_ENDPOINTS.inventoryItems}${id}/`, data);
-    }
-
-    async deleteInventoryItem(id) {
-        return await this.delete(`${API_ENDPOINTS.inventoryItems}${id}/`);
-    }
-
-    async getLowStockItems() {
-        return await this.get(API_ENDPOINTS.lowStockItems);
-    }
-}
-
-// Utility functions
-function showAlert(message, type = 'info') {
-    const alertDiv = document.createElement('div');
-    alertDiv.className = `alert alert-${type}`;
-    alertDiv.textContent = message;
-    
-    const container = document.querySelector('.container');
-    if (container) {
-        container.insertBefore(alertDiv, container.firstChild);
-        
-        // Auto-remove alert after 5 seconds
-        setTimeout(() => {
-            if (alertDiv.parentNode) {
-                alertDiv.parentNode.removeChild(alertDiv);
-            }
-        }, 5000);
-    }
-}
-
-function showLoading(element) {
-    element.innerHTML = '<div class="loading">Loading...</div>';
-}
-
-function formatCurrency(amount) {
-    return `$${parseFloat(amount).toFixed(2)}`;
-}
-
-function formatDateTime(dateString) {
-    const date = new Date(dateString);
-    return date.toLocaleString();
-}
-
-function getStatusBadge(status, statusChoices) {
-    const statusMap = {
-        'A': { class: 'badge-success', text: 'Available' },
-        'O': { class: 'badge-danger', text: 'Occupied' },
-        'R': { class: 'badge-info', text: 'Received' },
-        'P': { class: 'badge-warning', text: 'Preparing' },
-        'C': { class: 'badge-success', text: 'Completed' }
-    };
-    
-    const statusInfo = statusMap[status] || { class: 'badge-secondary', text: status };
-    return `<span class="badge ${statusInfo.class}">${statusInfo.text}</span>`;
-}
-
-// Create global API instance
-const api = new API();
Index: frontend/orders.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/orders.html b/frontend/orders.html
deleted file mode 100644
--- a/frontend/orders.html	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,654 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Restaurant Management System - Orders</title>
-    <link rel="stylesheet" href="css/style.css">
-    <style>
-        .orders-container {
-            display: grid;
-            grid-template-columns: 1fr 1fr 1fr;
-            gap: 2rem;
-            margin-top: 2rem;
-        }
-
-        .order-column {
-            background: white;
-            border-radius: 8px;
-            padding: 1.5rem;
-            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
-            min-height: 500px;
-        }
-
-        .column-header {
-            text-align: center;
-            padding: 1rem;
-            border-radius: 8px;
-            margin-bottom: 1rem;
-            font-weight: bold;
-            color: white;
-        }
-
-        .received-header {
-            background: #3498db;
-        }
-
-        .preparing-header {
-            background: #f39c12;
-        }
-
-        .completed-header {
-            background: #27ae60;
-        }
-
-        .order-card {
-            background: #f8f9fa;
-            border-radius: 8px;
-            padding: 1rem;
-            margin-bottom: 1rem;
-            border-left: 4px solid #ddd;
-            transition: all 0.3s ease;
-            cursor: pointer;
-        }
-
-        .order-card:hover {
-            transform: translateY(-2px);
-            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
-        }
-
-        .order-card.received {
-            border-left-color: #3498db;
-        }
-
-        .order-card.preparing {
-            border-left-color: #f39c12;
-        }
-
-        .order-card.completed {
-            border-left-color: #27ae60;
-        }
-
-        .order-header {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            margin-bottom: 0.5rem;
-        }
-
-        .order-id {
-            font-weight: bold;
-            font-size: 1.1rem;
-        }
-
-        .order-time {
-            color: #7f8c8d;
-            font-size: 0.9rem;
-        }
-
-        .order-table {
-            color: #2c3e50;
-            font-weight: 500;
-            margin-bottom: 0.5rem;
-        }
-
-        .order-items {
-            margin-bottom: 1rem;
-        }
-
-        .order-item {
-            display: flex;
-            justify-content: space-between;
-            padding: 0.25rem 0;
-            font-size: 0.9rem;
-        }
-
-        .order-total {
-            font-weight: bold;
-            text-align: right;
-            padding-top: 0.5rem;
-            border-top: 1px solid #ddd;
-        }
-
-        .order-actions {
-            display: flex;
-            gap: 0.5rem;
-            margin-top: 1rem;
-        }
-
-        .status-filters {
-            display: flex;
-            gap: 1rem;
-            margin-bottom: 2rem;
-            justify-content: center;
-        }
-
-        .filter-btn {
-            padding: 0.5rem 1rem;
-            border: 2px solid #3498db;
-            background: white;
-            color: #3498db;
-            border-radius: 20px;
-            cursor: pointer;
-            transition: all 0.3s;
-        }
-
-        .filter-btn.active,
-        .filter-btn:hover {
-            background: #3498db;
-            color: white;
-        }
-
-        .order-stats {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
-            gap: 1rem;
-            margin-bottom: 2rem;
-        }
-
-        .stat-card {
-            background: white;
-            padding: 1.5rem;
-            border-radius: 8px;
-            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
-            text-align: center;
-        }
-
-        .stat-number {
-            font-size: 2rem;
-            font-weight: bold;
-            color: #2c3e50;
-        }
-
-        .stat-label {
-            color: #7f8c8d;
-            margin-top: 0.5rem;
-        }
-
-        .empty-column {
-            text-align: center;
-            color: #7f8c8d;
-            padding: 2rem;
-        }
-
-        @media (max-width: 768px) {
-            .orders-container {
-                grid-template-columns: 1fr;
-            }
-            
-            .order-stats {
-                grid-template-columns: 1fr 1fr;
-            }
-        }
-    </style>
-</head>
-<body>
-    <!-- Navigation -->
-    <nav class="navbar">
-        <div class="nav-container">
-            <a href="index.html" class="logo">RMS Dashboard</a>
-            <ul class="nav-links">
-                <li><a href="index.html">Dashboard</a></li>
-                <li><a href="tables.html">Tables</a></li>
-                <li><a href="menu.html">Menu</a></li>
-                <li><a href="orders.html" class="active">Orders</a></li>
-                <li><a href="inventory.html">Inventory</a></li>
-                <li><a href="admin.html">Admin</a></li>
-            </ul>
-        </div>
-    </nav>
-
-    <!-- Main Content -->
-    <div class="container">
-        <div class="page-header">
-            <h1 class="page-title">Order Management</h1>
-            <p class="page-subtitle">Track and manage all restaurant orders</p>
-        </div>
-
-        <!-- Order Statistics -->
-        <div class="order-stats">
-            <div class="stat-card">
-                <div class="stat-number" id="totalOrdersToday">0</div>
-                <div class="stat-label">Orders Today</div>
-            </div>
-            <div class="stat-card">
-                <div class="stat-number" id="activeOrders">0</div>
-                <div class="stat-label">Active Orders</div>
-            </div>
-            <div class="stat-card">
-                <div class="stat-number" id="avgOrderTime">0</div>
-                <div class="stat-label">Avg. Prep Time (min)</div>
-            </div>
-            <div class="stat-card">
-                <div class="stat-number" id="todayRevenue">$0</div>
-                <div class="stat-label">Today's Revenue</div>
-            </div>
-        </div>
-
-        <!-- Status Filters -->
-        <div class="status-filters">
-            <button class="filter-btn active" data-status="all">All Orders</button>
-            <button class="filter-btn" data-status="R">Received</button>
-            <button class="filter-btn" data-status="P">Preparing</button>
-            <button class="filter-btn" data-status="C">Completed</button>
-        </div>
-
-        <!-- Orders Kanban Board -->
-        <div class="orders-container">
-            <!-- Received Orders -->
-            <div class="order-column">
-                <div class="column-header received-header">
-                    Received Orders
-                    <span id="receivedCount" class="badge" style="background: rgba(255,255,255,0.3); margin-left: 0.5rem;">0</span>
-                </div>
-                <div id="receivedOrders" class="orders-list">
-                    <div class="loading">Loading orders...</div>
-                </div>
-            </div>
-
-            <!-- Preparing Orders -->
-            <div class="order-column">
-                <div class="column-header preparing-header">
-                    Preparing Orders
-                    <span id="preparingCount" class="badge" style="background: rgba(255,255,255,0.3); margin-left: 0.5rem;">0</span>
-                </div>
-                <div id="preparingOrders" class="orders-list">
-                    <div class="loading">Loading orders...</div>
-                </div>
-            </div>
-
-            <!-- Completed Orders -->
-            <div class="order-column">
-                <div class="column-header completed-header">
-                    Completed Orders
-                    <span id="completedCount" class="badge" style="background: rgba(255,255,255,0.3); margin-left: 0.5rem;">0</span>
-                </div>
-                <div id="completedOrders" class="orders-list">
-                    <div class="loading">Loading orders...</div>
-                </div>
-            </div>
-        </div>
-
-        <!-- Order Details Modal -->
-        <div id="orderModal" class="hidden" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
-            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; padding: 2rem; max-width: 600px; width: 90%; max-height: 80%; overflow-y: auto;">
-                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
-                    <h3 id="modalOrderTitle">Order Details</h3>
-                    <button type="button" onclick="orderManager.closeModal()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer;">&times;</button>
-                </div>
-                <div id="modalOrderContent">
-                    <!-- Content will be populated by JavaScript -->
-                </div>
-            </div>
-        </div>
-    </div>
-
-    <script src="js/api.js"></script>
-    <script>
-        class OrderManager {
-            constructor() {
-                this.orders = [];
-                this.menuItems = [];
-                this.selectedStatus = 'all';
-                this.init();
-            }
-
-            async init() {
-                await this.loadData();
-                this.setupEventListeners();
-                this.renderOrders();
-                this.updateStatistics();
-                
-                // Auto-refresh every 30 seconds
-                setInterval(() => {
-                    this.loadData().then(() => {
-                        this.renderOrders();
-                        this.updateStatistics();
-                    });
-                }, 30000);
-            }
-
-            async loadData() {
-                try {
-                    const [ordersResponse, menuResponse] = await Promise.all([
-                        api.getOrders(),
-                        api.getMenuItems()
-                    ]);
-
-                    this.orders = ordersResponse.results || [];
-                    this.menuItems = menuResponse.results || [];
-
-                } catch (error) {
-                    console.error('Error loading orders data:', error);
-                    showAlert('Error loading orders data. Please check your connection.', 'error');
-                }
-            }
-
-            setupEventListeners() {
-                // Status filter buttons
-                document.querySelectorAll('.filter-btn').forEach(btn => {
-                    btn.addEventListener('click', (e) => {
-                        document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
-                        e.target.classList.add('active');
-                        this.selectedStatus = e.target.dataset.status;
-                        this.renderOrders();
-                    });
-                });
-            }
-
-            renderOrders() {
-                const receivedContainer = document.getElementById('receivedOrders');
-                const preparingContainer = document.getElementById('preparingOrders');
-                const completedContainer = document.getElementById('completedOrders');
-
-                // Filter orders based on selected status
-                let filteredOrders = this.orders;
-                if (this.selectedStatus !== 'all') {
-                    filteredOrders = this.orders.filter(order => order.status === this.selectedStatus);
-                }
-
-                // Separate orders by status
-                const receivedOrders = filteredOrders.filter(order => order.status === 'R');
-                const preparingOrders = filteredOrders.filter(order => order.status === 'P');
-                const completedOrders = filteredOrders.filter(order => order.status === 'C');
-
-                // Update counts
-                document.getElementById('receivedCount').textContent = receivedOrders.length;
-                document.getElementById('preparingCount').textContent = preparingOrders.length;
-                document.getElementById('completedCount').textContent = completedOrders.length;
-
-                // Render each column
-                this.renderOrderColumn(receivedContainer, receivedOrders, 'received');
-                this.renderOrderColumn(preparingContainer, preparingOrders, 'preparing');
-                this.renderOrderColumn(completedContainer, completedOrders, 'completed');
-            }
-
-            renderOrderColumn(container, orders, statusClass) {
-                if (orders.length === 0) {
-                    container.innerHTML = '<div class="empty-column">No orders</div>';
-                    return;
-                }
-
-                const html = orders.map(order => {
-                    const orderTime = new Date(order.created_at);
-                    const timeAgo = this.getTimeAgo(orderTime);
-                    
-                    return `
-                        <div class="order-card ${statusClass}" onclick="orderManager.viewOrderDetails(${order.id})">
-                            <div class="order-header">
-                                <div class="order-id">Order #${order.id}</div>
-                                <div class="order-time">${timeAgo}</div>
-                            </div>
-                            
-                            ${order.table_number ? `<div class="order-table">Table ${order.table_number}</div>` : ''}
-                            
-                            <div class="order-items">
-                                ${this.renderOrderItems(order)}
-                            </div>
-                            
-                            ${order.notes ? `<div style="font-style: italic; color: #7f8c8d; margin-bottom: 0.5rem;">Note: ${order.notes}</div>` : ''}
-                            
-                            <div class="order-total">
-                                Total: ${this.calculateOrderTotal(order)}
-                            </div>
-                            
-                            <div class="order-actions">
-                                ${this.getOrderActions(order)}
-                            </div>
-                        </div>
-                    `;
-                }).join('');
-
-                container.innerHTML = html;
-            }
-
-            renderOrderItems(order) {
-                if (!order.items || order.items.length === 0) {
-                    return '<div class="order-item">No items</div>';
-                }
-
-                return order.items.slice(0, 3).map(item => {
-                    const menuItem = this.menuItems.find(mi => mi.id === item.menu_item);
-                    const itemName = menuItem ? menuItem.name : `Item #${item.menu_item}`;
-                    
-                    return `
-                        <div class="order-item">
-                            <span>${item.quantity}x ${itemName}</span>
-                            <span>${formatCurrency(item.line_total || 0)}</span>
-                        </div>
-                    `;
-                }).join('') + (order.items.length > 3 ? `<div class="order-item"><em>+${order.items.length - 3} more items</em></div>` : '');
-            }
-
-            calculateOrderTotal(order) {
-                if (!order.items || order.items.length === 0) {
-                    return formatCurrency(0);
-                }
-                
-                const total = order.items.reduce((sum, item) => sum + parseFloat(item.line_total || 0), 0);
-                return formatCurrency(total);
-            }
-
-            getOrderActions(order) {
-                switch (order.status) {
-                    case 'R':
-                        return `
-                            <button class="btn btn-warning" onclick="event.stopPropagation(); orderManager.updateOrderStatus(${order.id}, 'P')" style="font-size: 0.8rem; padding: 0.25rem 0.5rem;">
-                                Start Preparing
-                            </button>
-                        `;
-                    case 'P':
-                        return `
-                            <button class="btn btn-success" onclick="event.stopPropagation(); orderManager.updateOrderStatus(${order.id}, 'C')" style="font-size: 0.8rem; padding: 0.25rem 0.5rem;">
-                                Mark Complete
-                            </button>
-                        `;
-                    case 'C':
-                        return `
-                            <span class="badge badge-success" style="font-size: 0.8rem;">Completed</span>
-                        `;
-                    default:
-                        return '';
-                }
-            }
-
-            async updateOrderStatus(orderId, newStatus) {
-                try {
-                    await api.updateOrderStatus(orderId, newStatus);
-                    showAlert('Order status updated successfully!', 'success');
-                    
-                    // Update local data
-                    const order = this.orders.find(o => o.id === orderId);
-                    if (order) {
-                        order.status = newStatus;
-                        order.updated_at = new Date().toISOString();
-                    }
-                    
-                    this.renderOrders();
-                    this.updateStatistics();
-                    
-                } catch (error) {
-                    console.error('Error updating order status:', error);
-                    showAlert('Error updating order status. Please try again.', 'error');
-                }
-            }
-
-            viewOrderDetails(orderId) {
-                const order = this.orders.find(o => o.id === orderId);
-                if (!order) return;
-
-                const modalTitle = document.getElementById('modalOrderTitle');
-                const modalContent = document.getElementById('modalOrderContent');
-
-                modalTitle.textContent = `Order #${order.id} Details`;
-
-                const orderTotal = this.calculateOrderTotal(order);
-                const createdTime = formatDateTime(order.created_at);
-                const updatedTime = formatDateTime(order.updated_at);
-
-                modalContent.innerHTML = `
-                    <div class="row">
-                        <div class="col-6">
-                            <div class="form-group">
-                                <label class="form-label">Order ID:</label>
-                                <p>#${order.id}</p>
-                            </div>
-                        </div>
-                        <div class="col-6">
-                            <div class="form-group">
-                                <label class="form-label">Table:</label>
-                                <p>${order.table_number ? `Table ${order.table_number}` : 'No table assigned'}</p>
-                            </div>
-                        </div>
-                    </div>
-                    
-                    <div class="row">
-                        <div class="col-6">
-                            <div class="form-group">
-                                <label class="form-label">Status:</label>
-                                <p>${getStatusBadge(order.status)}</p>
-                            </div>
-                        </div>
-                        <div class="col-6">
-                            <div class="form-group">
-                                <label class="form-label">Total:</label>
-                                <p style="font-size: 1.2rem; font-weight: bold; color: #27ae60;">${orderTotal}</p>
-                            </div>
-                        </div>
-                    </div>
-                    
-                    <div class="form-group">
-                        <label class="form-label">Created:</label>
-                        <p>${createdTime}</p>
-                    </div>
-                    
-                    <div class="form-group">
-                        <label class="form-label">Last Updated:</label>
-                        <p>${updatedTime}</p>
-                    </div>
-                    
-                    ${order.notes ? `
-                        <div class="form-group">
-                            <label class="form-label">Notes:</label>
-                            <p style="font-style: italic;">${order.notes}</p>
-                        </div>
-                    ` : ''}
-                    
-                    <div class="form-group">
-                        <label class="form-label">Order Items:</label>
-                        <div class="table">
-                            <table class="table">
-                                <thead>
-                                    <tr>
-                                        <th>Item</th>
-                                        <th>Quantity</th>
-                                        <th>Unit Price</th>
-                                        <th>Total</th>
-                                    </tr>
-                                </thead>
-                                <tbody>
-                                    ${order.items ? order.items.map(item => {
-                                        const menuItem = this.menuItems.find(mi => mi.id === item.menu_item);
-                                        const itemName = menuItem ? menuItem.name : `Item #${item.menu_item}`;
-                                        
-                                        return `
-                                            <tr>
-                                                <td>${itemName}</td>
-                                                <td>${item.quantity}</td>
-                                                <td>${formatCurrency(item.unit_price || 0)}</td>
-                                                <td>${formatCurrency(item.line_total || 0)}</td>
-                                            </tr>
-                                        `;
-                                    }).join('') : '<tr><td colspan="4">No items</td></tr>'}
-                                </tbody>
-                            </table>
-                        </div>
-                    </div>
-                    
-                    <div class="form-group">
-                        <label class="form-label">Update Status:</label>
-                        <div style="display: flex; gap: 0.5rem;">
-                            ${order.status === 'R' ? `
-                                <button class="btn btn-warning" onclick="orderManager.updateOrderStatus(${order.id}, 'P'); orderManager.closeModal();">
-                                    Start Preparing
-                                </button>
-                            ` : ''}
-                            ${order.status === 'P' ? `
-                                <button class="btn btn-success" onclick="orderManager.updateOrderStatus(${order.id}, 'C'); orderManager.closeModal();">
-                                    Mark Complete
-                                </button>
-                            ` : ''}
-                            ${order.status === 'C' ? `
-                                <span class="badge badge-success">Order Completed</span>
-                            ` : ''}
-                        </div>
-                    </div>
-                `;
-
-                document.getElementById('orderModal').classList.remove('hidden');
-            }
-
-            updateStatistics() {
-                const today = new Date();
-                today.setHours(0, 0, 0, 0);
-
-                const todayOrders = this.orders.filter(order => {
-                    const orderDate = new Date(order.created_at);
-                    orderDate.setHours(0, 0, 0, 0);
-                    return orderDate.getTime() === today.getTime();
-                });
-
-                const activeOrders = this.orders.filter(order => order.status !== 'C');
-                
-                const completedTodayOrders = todayOrders.filter(order => order.status === 'C');
-                const avgPrepTime = this.calculateAveragePreparationTime(completedTodayOrders);
-                
-                const todayRevenue = todayOrders.reduce((sum, order) => {
-                    const orderTotal = order.items ? order.items.reduce((itemSum, item) => 
-                        itemSum + parseFloat(item.line_total || 0), 0) : 0;
-                    return sum + orderTotal;
-                }, 0);
-
-                document.getElementById('totalOrdersToday').textContent = todayOrders.length;
-                document.getElementById('activeOrders').textContent = activeOrders.length;
-                document.getElementById('avgOrderTime').textContent = Math.round(avgPrepTime);
-                document.getElementById('todayRevenue').textContent = formatCurrency(todayRevenue);
-            }
-
-            calculateAveragePreparationTime(completedOrders) {
-                if (completedOrders.length === 0) return 0;
-
-                const totalTime = completedOrders.reduce((sum, order) => {
-                    const created = new Date(order.created_at);
-                    const updated = new Date(order.updated_at);
-                    const prepTime = (updated - created) / (1000 * 60); // minutes
-                    return sum + prepTime;
-                }, 0);
-
-                return totalTime / completedOrders.length;
-            }
-
-            getTimeAgo(date) {
-                const now = new Date();
-                const diffMs = now - date;
-                const diffMins = Math.floor(diffMs / 60000);
-                const diffHours = Math.floor(diffMins / 60);
-
-                if (diffMins < 1) return 'Just now';
-                if (diffMins < 60) return `${diffMins}m ago`;
-                if (diffHours < 24) return `${diffHours}h ago`;
-                return date.toLocaleDateString();
-            }
-
-            closeModal() {
-                document.getElementById('orderModal').classList.add('hidden');
-            }
-        }
-
-        // Initialize order manager when page loads
-        document.addEventListener('DOMContentLoaded', () => {
-            window.orderManager = new OrderManager();
-        });
-    </script>
-</body>
-</html>
Index: core/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/tests.py b/core/tests.py
deleted file mode 100644
--- a/core/tests.py	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,3 +0,0 @@
-from django.test import TestCase
-
-# Create your tests here.
Index: frontend/inventory.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/inventory.html b/frontend/inventory.html
deleted file mode 100644
--- a/frontend/inventory.html	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,642 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Restaurant Management System - Inventory</title>
-    <link rel="stylesheet" href="css/style.css">
-    <style>
-        .inventory-grid {
-            display: grid;
-            grid-template-columns: 1fr 1fr;
-            gap: 2rem;
-            margin-top: 2rem;
-        }
-
-        .inventory-section {
-            background: white;
-            border-radius: 8px;
-            padding: 1.5rem;
-            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
-        }
-
-        .inventory-item {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            padding: 1rem;
-            border: 1px solid #ecf0f1;
-            border-radius: 8px;
-            margin-bottom: 1rem;
-            transition: all 0.3s ease;
-        }
-
-        .inventory-item:hover {
-            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
-        }
-
-        .inventory-item.low-stock {
-            border-color: #e74c3c;
-            background-color: #fdf2f2;
-        }
-
-        .inventory-item.out-of-stock {
-            border-color: #c0392b;
-            background-color: #f8d7da;
-        }
-
-        .item-info {
-            flex: 1;
-        }
-
-        .item-name {
-            font-weight: bold;
-            color: #2c3e50;
-            margin-bottom: 0.25rem;
-        }
-
-        .item-category {
-            color: #7f8c8d;
-            font-size: 0.9rem;
-            margin-bottom: 0.25rem;
-        }
-
-        .item-supplier {
-            color: #95a5a6;
-            font-size: 0.8rem;
-        }
-
-        .item-quantity {
-            text-align: center;
-            margin: 0 1rem;
-        }
-
-        .quantity-number {
-            font-size: 1.5rem;
-            font-weight: bold;
-            color: #2c3e50;
-        }
-
-        .quantity-unit {
-            color: #7f8c8d;
-            font-size: 0.9rem;
-        }
-
-        .item-actions {
-            display: flex;
-            flex-direction: column;
-            gap: 0.5rem;
-        }
-
-        .stock-status {
-            padding: 0.25rem 0.75rem;
-            border-radius: 12px;
-            font-size: 0.8rem;
-            font-weight: 500;
-            text-align: center;
-        }
-
-        .status-good {
-            background-color: #d4edda;
-            color: #155724;
-        }
-
-        .status-low {
-            background-color: #fff3cd;
-            color: #856404;
-        }
-
-        .status-out {
-            background-color: #f8d7da;
-            color: #721c24;
-        }
-
-        .search-filters {
-            display: flex;
-            gap: 1rem;
-            margin-bottom: 2rem;
-            flex-wrap: wrap;
-        }
-
-        .filter-group {
-            display: flex;
-            flex-direction: column;
-            gap: 0.5rem;
-        }
-
-        .filter-label {
-            font-weight: 500;
-            color: #2c3e50;
-        }
-
-        .filter-select {
-            padding: 0.5rem;
-            border: 1px solid #ddd;
-            border-radius: 4px;
-            background: white;
-        }
-
-        .stats-grid {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
-            gap: 1rem;
-            margin-bottom: 2rem;
-        }
-
-        .stat-card {
-            background: white;
-            padding: 1.5rem;
-            border-radius: 8px;
-            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
-            text-align: center;
-        }
-
-        .stat-number {
-            font-size: 2rem;
-            font-weight: bold;
-            margin-bottom: 0.5rem;
-        }
-
-        .stat-number.good {
-            color: #27ae60;
-        }
-
-        .stat-number.warning {
-            color: #f39c12;
-        }
-
-        .stat-number.danger {
-            color: #e74c3c;
-        }
-
-        .stat-label {
-            color: #7f8c8d;
-        }
-
-        .update-form {
-            background: #f8f9fa;
-            padding: 1rem;
-            border-radius: 8px;
-            margin-top: 1rem;
-        }
-
-        .form-row {
-            display: flex;
-            gap: 1rem;
-            align-items: end;
-        }
-
-        @media (max-width: 768px) {
-            .inventory-grid {
-                grid-template-columns: 1fr;
-            }
-            
-            .search-filters {
-                flex-direction: column;
-            }
-            
-            .form-row {
-                flex-direction: column;
-                align-items: stretch;
-            }
-        }
-    </style>
-</head>
-<body>
-    <!-- Navigation -->
-    <nav class="navbar">
-        <div class="nav-container">
-            <a href="index.html" class="logo">RMS Dashboard</a>
-            <ul class="nav-links">
-                <li><a href="index.html">Dashboard</a></li>
-                <li><a href="tables.html">Tables</a></li>
-                <li><a href="menu.html">Menu</a></li>
-                <li><a href="orders.html">Orders</a></li>
-                <li><a href="inventory.html" class="active">Inventory</a></li>
-                <li><a href="admin.html">Admin</a></li>
-            </ul>
-        </div>
-    </nav>
-
-    <!-- Main Content -->
-    <div class="container">
-        <div class="page-header">
-            <h1 class="page-title">Inventory Management</h1>
-            <p class="page-subtitle">Monitor and manage restaurant inventory levels</p>
-        </div>
-
-        <!-- Inventory Statistics -->
-        <div class="stats-grid">
-            <div class="stat-card">
-                <div class="stat-number good" id="totalItems">0</div>
-                <div class="stat-label">Total Items</div>
-            </div>
-            <div class="stat-card">
-                <div class="stat-number warning" id="lowStockItems">0</div>
-                <div class="stat-label">Low Stock Items</div>
-            </div>
-            <div class="stat-card">
-                <div class="stat-number danger" id="outOfStockItems">0</div>
-                <div class="stat-label">Out of Stock</div>
-            </div>
-            <div class="stat-card">
-                <div class="stat-number good" id="wellStockedItems">0</div>
-                <div class="stat-label">Well Stocked</div>
-            </div>
-        </div>
-
-        <!-- Search and Filters -->
-        <div class="search-filters">
-            <div class="filter-group">
-                <label class="filter-label">Search Items:</label>
-                <input type="text" id="searchInput" class="form-control" placeholder="Search by name or supplier..." style="width: 300px;">
-            </div>
-            <div class="filter-group">
-                <label class="filter-label">Category:</label>
-                <select id="categoryFilter" class="filter-select">
-                    <option value="all">All Categories</option>
-                </select>
-            </div>
-            <div class="filter-group">
-                <label class="filter-label">Stock Status:</label>
-                <select id="statusFilter" class="filter-select">
-                    <option value="all">All Items</option>
-                    <option value="good">Well Stocked</option>
-                    <option value="low">Low Stock</option>
-                    <option value="out">Out of Stock</option>
-                </select>
-            </div>
-        </div>
-
-        <!-- Inventory Grid -->
-        <div class="inventory-grid">
-            <!-- Current Inventory -->
-            <div class="inventory-section">
-                <div class="card-header">
-                    <h3 class="card-title">Current Inventory</h3>
-                </div>
-                <div id="inventoryList">
-                    <div class="loading">Loading inventory items...</div>
-                </div>
-            </div>
-
-            <!-- Low Stock Alerts -->
-            <div class="inventory-section">
-                <div class="card-header">
-                    <h3 class="card-title">Low Stock Alerts</h3>
-                </div>
-                <div id="lowStockList">
-                    <div class="loading">Loading low stock items...</div>
-                </div>
-            </div>
-        </div>
-
-        <!-- Update Stock Modal -->
-        <div id="updateStockModal" class="hidden" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
-            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; padding: 2rem; max-width: 500px; width: 90%;">
-                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
-                    <h3 id="modalTitle">Update Stock</h3>
-                    <button type="button" onclick="inventoryManager.closeModal()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer;">&times;</button>
-                </div>
-                <div id="modalContent">
-                    <!-- Content will be populated by JavaScript -->
-                </div>
-            </div>
-        </div>
-    </div>
-
-    <script src="js/api.js"></script>
-    <script>
-        class InventoryManager {
-            constructor() {
-                this.inventoryItems = [];
-                this.categories = [];
-                this.filteredItems = [];
-                this.selectedCategory = 'all';
-                this.selectedStatus = 'all';
-                this.searchTerm = '';
-                this.init();
-            }
-
-            async init() {
-                await this.loadData();
-                this.setupEventListeners();
-                this.renderCategories();
-                this.filterItems();
-                this.updateStatistics();
-                
-                // Auto-refresh every 60 seconds
-                setInterval(() => {
-                    this.loadData().then(() => {
-                        this.filterItems();
-                        this.updateStatistics();
-                    });
-                }, 60000);
-            }
-
-            async loadData() {
-                try {
-                    const [itemsResponse, categoriesResponse] = await Promise.all([
-                        api.getInventoryItems(),
-                        api.getInventoryCategories()
-                    ]);
-
-                    this.inventoryItems = itemsResponse.results || [];
-                    this.categories = categoriesResponse.results || [];
-
-                } catch (error) {
-                    console.error('Error loading inventory data:', error);
-                    showAlert('Error loading inventory data. Please check your connection.', 'error');
-                }
-            }
-
-            setupEventListeners() {
-                const searchInput = document.getElementById('searchInput');
-                const categoryFilter = document.getElementById('categoryFilter');
-                const statusFilter = document.getElementById('statusFilter');
-
-                searchInput.addEventListener('input', (e) => {
-                    this.searchTerm = e.target.value.toLowerCase();
-                    this.filterItems();
-                });
-
-                categoryFilter.addEventListener('change', (e) => {
-                    this.selectedCategory = e.target.value;
-                    this.filterItems();
-                });
-
-                statusFilter.addEventListener('change', (e) => {
-                    this.selectedStatus = e.target.value;
-                    this.filterItems();
-                });
-            }
-
-            renderCategories() {
-                const categoryFilter = document.getElementById('categoryFilter');
-                
-                const categoryOptions = this.categories.map(category => 
-                    `<option value="${category.id}">${category.name}</option>`
-                ).join('');
-
-                categoryFilter.innerHTML = `
-                    <option value="all">All Categories</option>
-                    ${categoryOptions}
-                `;
-            }
-
-            filterItems() {
-                this.filteredItems = this.inventoryItems.filter(item => {
-                    const matchesCategory = this.selectedCategory === 'all' || item.category == this.selectedCategory;
-                    const matchesSearch = item.name.toLowerCase().includes(this.searchTerm) ||
-                                        (item.supplier && item.supplier.toLowerCase().includes(this.searchTerm));
-                    
-                    let matchesStatus = true;
-                    if (this.selectedStatus !== 'all') {
-                        const stockStatus = this.getStockStatus(item);
-                        matchesStatus = stockStatus === this.selectedStatus;
-                    }
-                    
-                    return matchesCategory && matchesSearch && matchesStatus;
-                });
-
-                this.renderInventoryItems();
-                this.renderLowStockItems();
-            }
-
-            getStockStatus(item) {
-                if (item.quantity <= 0) return 'out';
-                if (item.quantity < item.threshold) return 'low';
-                return 'good';
-            }
-
-            renderInventoryItems() {
-                const inventoryList = document.getElementById('inventoryList');
-
-                if (this.filteredItems.length === 0) {
-                    inventoryList.innerHTML = '<p class="text-center">No inventory items found.</p>';
-                    return;
-                }
-
-                const html = this.filteredItems.map(item => {
-                    const category = this.categories.find(cat => cat.id === item.category);
-                    const stockStatus = this.getStockStatus(item);
-                    const statusClass = stockStatus === 'out' ? 'out-of-stock' : 
-                                      stockStatus === 'low' ? 'low-stock' : '';
-
-                    return `
-                        <div class="inventory-item ${statusClass}">
-                            <div class="item-info">
-                                <div class="item-name">${item.name}</div>
-                                <div class="item-category">${category ? category.name : 'Unknown Category'}</div>
-                                ${item.supplier ? `<div class="item-supplier">Supplier: ${item.supplier}</div>` : ''}
-                            </div>
-                            
-                            <div class="item-quantity">
-                                <div class="quantity-number">${item.quantity}</div>
-                                <div class="quantity-unit">${item.unit}</div>
-                                <div style="font-size: 0.8rem; color: #7f8c8d;">
-                                    Threshold: ${item.threshold}
-                                </div>
-                            </div>
-                            
-                            <div class="item-actions">
-                                <div class="stock-status status-${stockStatus}">
-                                    ${stockStatus === 'good' ? 'Well Stocked' : 
-                                      stockStatus === 'low' ? 'Low Stock' : 'Out of Stock'}
-                                </div>
-                                <button class="btn btn-primary" style="font-size: 0.8rem; padding: 0.25rem 0.5rem;" 
-                                        onclick="inventoryManager.showUpdateModal(${item.id})">
-                                    Update Stock
-                                </button>
-                            </div>
-                        </div>
-                    `;
-                }).join('');
-
-                inventoryList.innerHTML = html;
-            }
-
-            renderLowStockItems() {
-                const lowStockList = document.getElementById('lowStockList');
-                const lowStockItems = this.inventoryItems.filter(item => 
-                    item.quantity < item.threshold && item.quantity > 0
-                );
-
-                if (lowStockItems.length === 0) {
-                    lowStockList.innerHTML = '<p class="text-center">No low stock items!</p>';
-                    return;
-                }
-
-                const html = lowStockItems.map(item => {
-                    const category = this.categories.find(cat => cat.id === item.category);
-                    const percentageLeft = ((item.quantity / item.threshold) * 100).toFixed(1);
-
-                    return `
-                        <div class="inventory-item low-stock">
-                            <div class="item-info">
-                                <div class="item-name">${item.name}</div>
-                                <div class="item-category">${category ? category.name : 'Unknown Category'}</div>
-                                <div style="color: #e74c3c; font-size: 0.9rem; font-weight: 500;">
-                                    ${percentageLeft}% of threshold remaining
-                                </div>
-                            </div>
-                            
-                            <div class="item-quantity">
-                                <div class="quantity-number" style="color: #e74c3c;">${item.quantity}</div>
-                                <div class="quantity-unit">${item.unit}</div>
-                            </div>
-                            
-                            <div class="item-actions">
-                                <button class="btn btn-warning" style="font-size: 0.8rem; padding: 0.25rem 0.5rem;" 
-                                        onclick="inventoryManager.showUpdateModal(${item.id})">
-                                    Restock
-                                </button>
-                            </div>
-                        </div>
-                    `;
-                }).join('');
-
-                lowStockList.innerHTML = html;
-            }
-
-            updateStatistics() {
-                const totalItems = this.inventoryItems.length;
-                const lowStockItems = this.inventoryItems.filter(item => 
-                    item.quantity < item.threshold && item.quantity > 0
-                ).length;
-                const outOfStockItems = this.inventoryItems.filter(item => 
-                    item.quantity <= 0
-                ).length;
-                const wellStockedItems = totalItems - lowStockItems - outOfStockItems;
-
-                document.getElementById('totalItems').textContent = totalItems;
-                document.getElementById('lowStockItems').textContent = lowStockItems;
-                document.getElementById('outOfStockItems').textContent = outOfStockItems;
-                document.getElementById('wellStockedItems').textContent = wellStockedItems;
-            }
-
-            showUpdateModal(itemId) {
-                const item = this.inventoryItems.find(i => i.id === itemId);
-                if (!item) return;
-
-                const category = this.categories.find(cat => cat.id === item.category);
-                const modalTitle = document.getElementById('modalTitle');
-                const modalContent = document.getElementById('modalContent');
-
-                modalTitle.textContent = `Update Stock - ${item.name}`;
-
-                modalContent.innerHTML = `
-                    <div class="form-group">
-                        <label class="form-label">Item Name:</label>
-                        <div class="form-control" style="background: #f8f9fa;">${item.name}</div>
-                    </div>
-                    
-                    <div class="row">
-                        <div class="col-6">
-                            <div class="form-group">
-                                <label class="form-label">Current Stock:</label>
-                                <div class="form-control" style="background: #f8f9fa;">${item.quantity} ${item.unit}</div>
-                            </div>
-                        </div>
-                        <div class="col-6">
-                            <div class="form-group">
-                                <label class="form-label">Threshold:</label>
-                                <div class="form-control" style="background: #f8f9fa;">${item.threshold} ${item.unit}</div>
-                            </div>
-                        </div>
-                    </div>
-                    
-                    <div class="form-group">
-                        <label class="form-label">Category:</label>
-                        <div class="form-control" style="background: #f8f9fa;">${category ? category.name : 'Unknown'}</div>
-                    </div>
-                    
-                    <div class="update-form">
-                        <h4>Update Stock</h4>
-                        <div class="form-row">
-                            <div class="form-group" style="flex: 1;">
-                                <label class="form-label">New Quantity:</label>
-                                <input type="number" id="newQuantity" class="form-control" 
-                                       value="${item.quantity}" min="0" step="0.01">
-                            </div>
-                            <div class="form-group" style="flex: 1;">
-                                <label class="form-label">Add/Remove:</label>
-                                <input type="number" id="quantityChange" class="form-control" 
-                                       placeholder="±0.00" step="0.01">
-                            </div>
-                            <div class="form-group">
-                                <button type="button" class="btn btn-success" onclick="inventoryManager.updateStock(${item.id})">
-                                    Update
-                                </button>
-                            </div>
-                        </div>
-                        <small style="color: #7f8c8d;">
-                            Enter either a new total quantity or an amount to add/remove (use negative numbers to remove)
-                        </small>
-                    </div>
-                `;
-
-                // Add event listeners for quantity inputs
-                setTimeout(() => {
-                    const newQuantityInput = document.getElementById('newQuantity');
-                    const quantityChangeInput = document.getElementById('quantityChange');
-
-                    newQuantityInput.addEventListener('input', () => {
-                        quantityChangeInput.value = '';
-                    });
-
-                    quantityChangeInput.addEventListener('input', () => {
-                        if (quantityChangeInput.value) {
-                            const change = parseFloat(quantityChangeInput.value) || 0;
-                            newQuantityInput.value = (parseFloat(item.quantity) + change).toFixed(2);
-                        }
-                    });
-                }, 100);
-
-                document.getElementById('updateStockModal').classList.remove('hidden');
-            }
-
-            async updateStock(itemId) {
-                const newQuantity = document.getElementById('newQuantity').value;
-                
-                if (!newQuantity || parseFloat(newQuantity) < 0) {
-                    showAlert('Please enter a valid quantity', 'warning');
-                    return;
-                }
-
-                try {
-                    await api.updateInventoryItem(itemId, {
-                        quantity: parseFloat(newQuantity)
-                    });
-
-                    showAlert('Stock updated successfully!', 'success');
-                    
-                    // Update local data
-                    const item = this.inventoryItems.find(i => i.id === itemId);
-                    if (item) {
-                        item.quantity = parseFloat(newQuantity);
-                        item.last_updated = new Date().toISOString();
-                    }
-                    
-                    this.filterItems();
-                    this.updateStatistics();
-                    this.closeModal();
-                    
-                } catch (error) {
-                    console.error('Error updating stock:', error);
-                    showAlert('Error updating stock. Please try again.', 'error');
-                }
-            }
-
-            closeModal() {
-                document.getElementById('updateStockModal').classList.add('hidden');
-            }
-        }
-
-        // Initialize inventory manager when page loads
-        document.addEventListener('DOMContentLoaded', () => {
-            window.inventoryManager = new InventoryManager();
-        });
-    </script>
-</body>
-</html>
Index: frontend/menu.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/menu.html b/frontend/menu.html
deleted file mode 100644
--- a/frontend/menu.html	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ /dev/null	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
@@ -1,457 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Restaurant Management System - Menu</title>
-    <link rel="stylesheet" href="css/style.css">
-    <style>
-        .menu-grid {
-            display: grid;
-            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
-            gap: 1.5rem;
-            margin-top: 2rem;
-        }
-
-        .menu-item-card {
-            background: white;
-            border-radius: 8px;
-            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
-            overflow: hidden;
-            transition: transform 0.3s ease;
-        }
-
-        .menu-item-card:hover {
-            transform: translateY(-5px);
-        }
-
-        .menu-item-image {
-            width: 100%;
-            height: 200px;
-            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
-            display: flex;
-            align-items: center;
-            justify-content: center;
-            color: white;
-            font-size: 3rem;
-        }
-
-        .menu-item-content {
-            padding: 1.5rem;
-        }
-
-        .menu-item-title {
-            font-size: 1.3rem;
-            font-weight: bold;
-            color: #2c3e50;
-            margin-bottom: 0.5rem;
-        }
-
-        .menu-item-description {
-            color: #7f8c8d;
-            margin-bottom: 1rem;
-            line-height: 1.5;
-        }
-
-        .menu-item-price {
-            font-size: 1.5rem;
-            font-weight: bold;
-            color: #27ae60;
-            margin-bottom: 1rem;
-        }
-
-        .menu-item-actions {
-            display: flex;
-            gap: 0.5rem;
-        }
-
-        .category-filter {
-            display: flex;
-            gap: 1rem;
-            margin-bottom: 2rem;
-            flex-wrap: wrap;
-        }
-
-        .category-btn {
-            padding: 0.5rem 1rem;
-            border: 2px solid #3498db;
-            background: white;
-            color: #3498db;
-            border-radius: 20px;
-            cursor: pointer;
-            transition: all 0.3s;
-        }
-
-        .category-btn.active,
-        .category-btn:hover {
-            background: #3498db;
-            color: white;
-        }
-
-        .search-bar {
-            margin-bottom: 2rem;
-        }
-
-        .search-input {
-            width: 100%;
-            max-width: 400px;
-            padding: 0.75rem;
-            border: 1px solid #ddd;
-            border-radius: 25px;
-            font-size: 1rem;
-            outline: none;
-        }
-
-        .search-input:focus {
-            border-color: #3498db;
-            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
-        }
-
-        .availability-toggle {
-            display: flex;
-            align-items: center;
-            gap: 0.5rem;
-            margin-top: 1rem;
-        }
-
-        .toggle-switch {
-            position: relative;
-            width: 50px;
-            height: 25px;
-            background: #ccc;
-            border-radius: 25px;
-            cursor: pointer;
-            transition: background 0.3s;
-        }
-
-        .toggle-switch.active {
-            background: #27ae60;
-        }
-
-        .toggle-slider {
-            position: absolute;
-            top: 2px;
-            left: 2px;
-            width: 21px;
-            height: 21px;
-            background: white;
-            border-radius: 50%;
-            transition: transform 0.3s;
-        }
-
-        .toggle-switch.active .toggle-slider {
-            transform: translateX(25px);
-        }
-
-        .customizations-list {
-            margin-top: 1rem;
-        }
-
-        .customization-item {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            padding: 0.5rem;
-            background: #f8f9fa;
-            border-radius: 4px;
-            margin-bottom: 0.5rem;
-        }
-    </style>
-</head>
-<body>
-    <!-- Navigation -->
-    <nav class="navbar">
-        <div class="nav-container">
-            <a href="index.html" class="logo">RMS Dashboard</a>
-            <ul class="nav-links">
-                <li><a href="index.html">Dashboard</a></li>
-                <li><a href="tables.html">Tables</a></li>
-                <li><a href="menu.html" class="active">Menu</a></li>
-                <li><a href="orders.html">Orders</a></li>
-                <li><a href="inventory.html">Inventory</a></li>
-                <li><a href="admin.html">Admin</a></li>
-            </ul>
-        </div>
-    </nav>
-
-    <!-- Main Content -->
-    <div class="container">
-        <div class="page-header">
-            <h1 class="page-title">Restaurant Menu</h1>
-            <p class="page-subtitle">Browse our delicious menu items</p>
-        </div>
-
-        <!-- Search and Filters -->
-        <div class="search-bar text-center">
-            <input type="text" id="searchInput" class="search-input" placeholder="Search menu items...">
-        </div>
-
-        <div class="category-filter" id="categoryFilter">
-            <button class="category-btn active" data-category="all">All Items</button>
-        </div>
-
-        <!-- Menu Items Grid -->
-        <div class="menu-grid" id="menuGrid">
-            <div class="loading">Loading menu items...</div>
-        </div>
-
-        <!-- Menu Item Details Modal -->
-        <div id="menuItemModal" class="hidden" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
-            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; padding: 2rem; max-width: 500px; width: 90%; max-height: 80%; overflow-y: auto;">
-                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
-                    <h3 id="modalTitle">Menu Item Details</h3>
-                    <button type="button" onclick="menuManager.closeModal()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer;">&times;</button>
-                </div>
-                <div id="modalContent">
-                    <!-- Content will be populated by JavaScript -->
-                </div>
-            </div>
-        </div>
-    </div>
-
-    <script src="js/api.js"></script>
-    <script>
-        class MenuManager {
-            constructor() {
-                this.menuItems = [];
-                this.categories = [];
-                this.customizations = [];
-                this.filteredItems = [];
-                this.selectedCategory = 'all';
-                this.searchTerm = '';
-                this.init();
-            }
-
-            async init() {
-                await this.loadData();
-                this.setupEventListeners();
-                this.renderCategories();
-                this.renderMenuItems();
-            }
-
-            async loadData() {
-                try {
-                    const [menuResponse, categoriesResponse, customizationsResponse] = await Promise.all([
-                        api.getMenuItems(),
-                        api.getCategories(),
-                        api.getCustomizations()
-                    ]);
-
-                    this.menuItems = menuResponse.results || [];
-                    this.categories = categoriesResponse.results || [];
-                    this.customizations = customizationsResponse.results || [];
-                    this.filteredItems = [...this.menuItems];
-
-                } catch (error) {
-                    console.error('Error loading menu data:', error);
-                    showAlert('Error loading menu data. Please check your connection.', 'error');
-                }
-            }
-
-            setupEventListeners() {
-                const searchInput = document.getElementById('searchInput');
-                searchInput.addEventListener('input', (e) => {
-                    this.searchTerm = e.target.value.toLowerCase();
-                    this.filterItems();
-                });
-            }
-
-            renderCategories() {
-                const categoryFilter = document.getElementById('categoryFilter');
-                
-                // Keep the "All Items" button and add category buttons
-                const categoryButtons = this.categories.map(category => `
-                    <button class="category-btn" data-category="${category.id}">${category.name}</button>
-                `).join('');
-
-                categoryFilter.innerHTML = `
-                    <button class="category-btn active" data-category="all">All Items</button>
-                    ${categoryButtons}
-                `;
-
-                // Add click event listeners
-                categoryFilter.addEventListener('click', (e) => {
-                    if (e.target.classList.contains('category-btn')) {
-                        // Remove active class from all buttons
-                        document.querySelectorAll('.category-btn').forEach(btn => {
-                            btn.classList.remove('active');
-                        });
-                        
-                        // Add active class to clicked button
-                        e.target.classList.add('active');
-                        
-                        this.selectedCategory = e.target.dataset.category;
-                        this.filterItems();
-                    }
-                });
-            }
-
-            filterItems() {
-                this.filteredItems = this.menuItems.filter(item => {
-                    const matchesCategory = this.selectedCategory === 'all' || item.category == this.selectedCategory;
-                    const matchesSearch = item.name.toLowerCase().includes(this.searchTerm) ||
-                                        (item.description && item.description.toLowerCase().includes(this.searchTerm));
-                    
-                    return matchesCategory && matchesSearch;
-                });
-
-                this.renderMenuItems();
-            }
-
-            renderMenuItems() {
-                const menuGrid = document.getElementById('menuGrid');
-
-                if (this.filteredItems.length === 0) {
-                    menuGrid.innerHTML = '<div class="text-center col"><p>No menu items found.</p></div>';
-                    return;
-                }
-
-                const html = this.filteredItems.map(item => {
-                    const category = this.categories.find(cat => cat.id === item.category);
-                    const categoryName = category ? category.name : 'Unknown';
-                    
-                    return `
-                        <div class="menu-item-card">
-                            <div class="menu-item-image">
-                                🍽️
-                            </div>
-                            <div class="menu-item-content">
-                                <div class="menu-item-title">${item.name}</div>
-                                <div class="menu-item-description">
-                                    ${item.description || 'No description available'}
-                                </div>
-                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
-                                    <div class="menu-item-price">${formatCurrency(item.price)}</div>
-                                    <span class="badge ${item.is_available ? 'badge-success' : 'badge-danger'}">
-                                        ${item.is_available ? 'Available' : 'Unavailable'}
-                                    </span>
-                                </div>
-                                <div style="color: #7f8c8d; margin-bottom: 1rem;">
-                                    <small>Category: ${categoryName}</small>
-                                </div>
-                                <div class="menu-item-actions">
-                                    <button class="btn btn-primary" onclick="menuManager.viewItemDetails(${item.id})">
-                                        View Details
-                                    </button>
-                                    <button class="btn btn-success" onclick="menuManager.addToOrder(${item.id})" ${!item.is_available ? 'disabled' : ''}>
-                                        Add to Order
-                                    </button>
-                                </div>
-                            </div>
-                        </div>
-                    `;
-                }).join('');
-
-                menuGrid.innerHTML = html;
-            }
-
-            viewItemDetails(itemId) {
-                const item = this.menuItems.find(i => i.id === itemId);
-                if (!item) return;
-
-                const category = this.categories.find(cat => cat.id === item.category);
-                const itemCustomizations = this.customizations.filter(custom => 
-                    item.customization && item.customization.includes(custom.id)
-                );
-
-                const modalTitle = document.getElementById('modalTitle');
-                const modalContent = document.getElementById('modalContent');
-
-                modalTitle.textContent = item.name;
-
-                modalContent.innerHTML = `
-                    <div class="menu-item-image" style="height: 150px; margin-bottom: 1rem;">
-                        🍽️
-                    </div>
-                    
-                    <div class="form-group">
-                        <label class="form-label">Description:</label>
-                        <p>${item.description || 'No description available'}</p>
-                    </div>
-                    
-                    <div class="row">
-                        <div class="col-6">
-                            <div class="form-group">
-                                <label class="form-label">Price:</label>
-                                <div class="menu-item-price">${formatCurrency(item.price)}</div>
-                            </div>
-                        </div>
-                        <div class="col-6">
-                            <div class="form-group">
-                                <label class="form-label">Category:</label>
-                                <p>${category ? category.name : 'Unknown'}</p>
-                            </div>
-                        </div>
-                    </div>
-                    
-                    <div class="form-group">
-                        <label class="form-label">Availability:</label>
-                        <span class="badge ${item.is_available ? 'badge-success' : 'badge-danger'}">
-                            ${item.is_available ? 'Available' : 'Unavailable'}
-                        </span>
-                    </div>
-                    
-                    ${itemCustomizations.length > 0 ? `
-                        <div class="form-group">
-                            <label class="form-label">Available Customizations:</label>
-                            <div class="customizations-list">
-                                ${itemCustomizations.map(custom => `
-                                    <div class="customization-item">
-                                        <span>${custom.name}</span>
-                                        <span>${formatCurrency(custom.price)}</span>
-                                    </div>
-                                `).join('')}
-                            </div>
-                        </div>
-                    ` : ''}
-                    
-                    <div class="form-group">
-                        <button class="btn btn-success" onclick="menuManager.addToOrder(${item.id})" ${!item.is_available ? 'disabled' : ''} style="width: 100%;">
-                            Add to Order
-                        </button>
-                    </div>
-                `;
-
-                document.getElementById('menuItemModal').classList.remove('hidden');
-            }
-
-            addToOrder(itemId) {
-                const item = this.menuItems.find(i => i.id === itemId);
-                if (!item || !item.is_available) {
-                    showAlert('This item is currently unavailable', 'warning');
-                    return;
-                }
-
-                // Store in localStorage for the tables page to access
-                let orderItems = JSON.parse(localStorage.getItem('pendingOrderItems') || '[]');
-                
-                const existingItem = orderItems.find(orderItem => orderItem.id === itemId);
-                if (existingItem) {
-                    existingItem.quantity += 1;
-                } else {
-                    orderItems.push({
-                        id: itemId,
-                        name: item.name,
-                        price: parseFloat(item.price),
-                        quantity: 1
-                    });
-                }
-
-                localStorage.setItem('pendingOrderItems', JSON.stringify(orderItems));
-                
-                showAlert(`${item.name} added to order!`, 'success');
-                this.closeModal();
-            }
-
-            closeModal() {
-                document.getElementById('menuItemModal').classList.add('hidden');
-            }
-        }
-
-        // Initialize menu manager when page loads
-        document.addEventListener('DOMContentLoaded', () => {
-            window.menuManager = new MenuManager();
-        });
-    </script>
-</body>
-</html>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"90ff9b72-7f83-4c62-8441-96c42d4770f8\" name=\"Changes\" comment=\"testing updates\">\n      <change afterPath=\"$PROJECT_DIR$/center/templates/center/dashboard.html\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/center/urls.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/RMS/settings.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/RMS/settings.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/RMS/urls.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/RMS/urls.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/menu/templates/menu/category.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/menu/templates/menu/category.html\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/menu/templates/menu/customization.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/menu/templates/menu/customization.html\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/menu/templates/menu/menu_add_edit.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/menu/templates/menu/menu_add_edit.html\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/menu/templates/menu/menu_list.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/menu/templates/menu/menu_list.html\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/order/templates/order.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/order/templates/order.html\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/order/templates/orderitem.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/order/templates/orderitem.html\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/templates/base.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/templates/base.html\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;BanyarSawThit&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/BuiTranDoan/CP3407---Advanced-Software-Engineering.git&quot;,\n    &quot;accountId&quot;: &quot;03f67a61-01d4-42f0-bc2f-670b49d5dfc8&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 4\n}</component>\n  <component name=\"ProjectId\" id=\"2yr13MKCvlPDM2DPQRWd6kO02xU\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;#1 on iteration-1&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/banyarsawthit/SoftwareDevelopment/GitHub/CP3407-ASE/menu/templates/menu&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/menu/templates/menu\" />\n      <recent name=\"$PROJECT_DIR$/static\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/center/template/dashboard\" />\n      <recent name=\"$PROJECT_DIR$/static/images\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CP3407-ASE\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CP3407-ASE\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CP3407-ASE\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CP3407-ASE\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CP3407-ASE\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CP3407-ASE\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CP3407-ASE\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"manage\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"CP3407---Advanced-Software-Engineering1\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"SDK_NAME\" value=\"Python 3.11 virtualenv at ~/SoftwareDevelopment/GitHub/CP3407-ASE/.venv\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/manage.py\" />\n      <option name=\"PARAMETERS\" value=\"runserver\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"manage\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"CP3407---Advanced-Software-Engineering1\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"SDK_NAME\" value=\"Python 3.11 virtualenv at ~/SoftwareDevelopment/GitHub/CP3407-ASE/.venv\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/manage.py\" />\n      <option name=\"PARAMETERS\" value=\"runserver\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-1632447f56bf-JavaScript-PY-243.26053.29\" />\n        <option value=\"bundled-python-sdk-b1dbf8ef85a6-4df51de95216-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.26053.29\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"90ff9b72-7f83-4c62-8441-96c42d4770f8\" name=\"Changes\" comment=\"\" />\n      <created>1750577677799</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1750577677799</updated>\n      <workItem from=\"1750577678842\" duration=\"874000\" />\n      <workItem from=\"1751891165680\" duration=\"133000\" />\n      <workItem from=\"1751891523268\" duration=\"7887000\" />\n      <workItem from=\"1751989837666\" duration=\"5858000\" />\n      <workItem from=\"1752026924726\" duration=\"48000\" />\n      <workItem from=\"1752027024365\" duration=\"18635000\" />\n      <workItem from=\"1752126105573\" duration=\"3393000\" />\n      <workItem from=\"1752142200180\" duration=\"18392000\" />\n      <workItem from=\"1752320431422\" duration=\"14898000\" />\n      <workItem from=\"1752462149302\" duration=\"1286000\" />\n      <workItem from=\"1752474293168\" duration=\"62000\" />\n      <workItem from=\"1752475613489\" duration=\"6530000\" />\n      <workItem from=\"1752489439345\" duration=\"3484000\" />\n      <workItem from=\"1752541957982\" duration=\"29080000\" />\n      <workItem from=\"1752633395287\" duration=\"4102000\" />\n      <workItem from=\"1752638649672\" duration=\"17661000\" />\n      <workItem from=\"1752685347024\" duration=\"10000\" />\n      <workItem from=\"1752767568158\" duration=\"1227000\" />\n      <workItem from=\"1752857858948\" duration=\"4000\" />\n      <workItem from=\"1753233171508\" duration=\"5804000\" />\n      <workItem from=\"1753247825545\" duration=\"33137000\" />\n      <workItem from=\"1753427401547\" duration=\"17763000\" />\n      <workItem from=\"1753530114851\" duration=\"2446000\" />\n      <workItem from=\"1753751645886\" duration=\"705000\" />\n      <workItem from=\"1753758571661\" duration=\"13281000\" />\n      <workItem from=\"1753804643150\" duration=\"16231000\" />\n      <workItem from=\"1753854230670\" duration=\"6292000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Category pages\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1752145943586</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1752145943586</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Menu CRUD first done\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1752426113974</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1752426113974</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Order CRUD\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1752604191039</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1752604191039</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Iteration I\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1753233226682</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1753233226682</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"inventory_purchase\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1753429276381</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1753429276381</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"testing updates\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1753844118266</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1753844118266</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"7\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Category pages\" />\n    <MESSAGE value=\"Menu CRUD first done\" />\n    <MESSAGE value=\"Order CRUD\" />\n    <MESSAGE value=\"Iteration I\" />\n    <MESSAGE value=\"inventory_purchase\" />\n    <MESSAGE value=\"testing updates\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"testing updates\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a1c21e94ffe94c4d97ed5d7802edcb15e3dd8df6)
+++ b/.idea/workspace.xml	(date 1753925615657)
@@ -5,17 +5,25 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="90ff9b72-7f83-4c62-8441-96c42d4770f8" name="Changes" comment="testing updates">
-      <change afterPath="$PROJECT_DIR$/center/templates/center/dashboard.html" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/center/urls.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/RMS/settings.py" beforeDir="false" afterPath="$PROJECT_DIR$/RMS/settings.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/RMS/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/RMS/urls.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/menu/templates/menu/category.html" beforeDir="false" afterPath="$PROJECT_DIR$/menu/templates/menu/category.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/menu/templates/menu/customization.html" beforeDir="false" afterPath="$PROJECT_DIR$/menu/templates/menu/customization.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/menu/templates/menu/menu_add_edit.html" beforeDir="false" afterPath="$PROJECT_DIR$/menu/templates/menu/menu_add_edit.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/menu/templates/menu/menu_list.html" beforeDir="false" afterPath="$PROJECT_DIR$/menu/templates/menu/menu_list.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/order/templates/order.html" beforeDir="false" afterPath="$PROJECT_DIR$/order/templates/order.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/order/templates/orderitem.html" beforeDir="false" afterPath="$PROJECT_DIR$/order/templates/orderitem.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/center/templates/center/dashboard.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/center/urls.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/admin.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/apps.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/models.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/tests.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/views.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/admin.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/css/style.css" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/index.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/inventory.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/js/api.js" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/menu.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/order.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/orders.html" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/frontend/tables.html" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/templates/base.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/base.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -26,7 +34,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="main" />
+        <entry key="$PROJECT_DIR$" value="iteration-1" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -51,21 +59,21 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;#1 on iteration-1&quot;,
-    &quot;last_opened_file_path&quot;: &quot;/Users/banyarsawthit/SoftwareDevelopment/GitHub/CP3407-ASE/menu/templates/menu&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "RunOnceActivity.git.unshallow": "true",
+    "git-widget-placeholder": "iteration-2",
+    "last_opened_file_path": "/Users/banyarsawthit/SoftwareDevelopment/GitHub/CP3407-ASE/menu/templates/menu",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="$PROJECT_DIR$/menu/templates/menu" />
@@ -77,29 +85,6 @@
     </key>
   </component>
   <component name="RunManager">
-    <configuration default="true" type="PythonConfigurationType" factoryName="Python">
-      <module name="CP3407-ASE" />
-      <option name="ENV_FILES" value="" />
-      <option name="INTERPRETER_OPTIONS" value="" />
-      <option name="PARENT_ENVS" value="true" />
-      <envs>
-        <env name="PYTHONUNBUFFERED" value="1" />
-      </envs>
-      <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="" />
-      <option name="IS_MODULE_SDK" value="false" />
-      <option name="ADD_CONTENT_ROOTS" value="true" />
-      <option name="ADD_SOURCE_ROOTS" value="true" />
-      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
-      <option name="SCRIPT_NAME" value="" />
-      <option name="PARAMETERS" value="" />
-      <option name="SHOW_COMMAND_LINE" value="false" />
-      <option name="EMULATE_TERMINAL" value="false" />
-      <option name="MODULE_MODE" value="false" />
-      <option name="REDIRECT_INPUT" value="false" />
-      <option name="INPUT_FILE" value="" />
-      <method v="2" />
-    </configuration>
     <configuration default="true" type="PythonConfigurationType" factoryName="Python">
       <module name="CP3407-ASE" />
       <option name="ENV_FILES" value="" />
@@ -330,6 +315,8 @@
       <workItem from="1753758571661" duration="13281000" />
       <workItem from="1753804643150" duration="16231000" />
       <workItem from="1753854230670" duration="6292000" />
+      <workItem from="1753886035953" duration="1131000" />
+      <workItem from="1753925206895" duration="409000" />
     </task>
     <task id="LOCAL-00001" summary="Category pages">
       <option name="closed" value="true" />
